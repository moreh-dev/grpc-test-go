// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: sdamanager_core.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConnectionClient is the client API for Connection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectionClient interface {
	MakeConnection(ctx context.Context, opts ...grpc.CallOption) (Connection_MakeConnectionClient, error)
}

type connectionClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectionClient(cc grpc.ClientConnInterface) ConnectionClient {
	return &connectionClient{cc}
}

func (c *connectionClient) MakeConnection(ctx context.Context, opts ...grpc.CallOption) (Connection_MakeConnectionClient, error) {
	stream, err := c.cc.NewStream(ctx, &Connection_ServiceDesc.Streams[0], "/moreh.sdamanager.Connection/MakeConnection", opts...)
	if err != nil {
		return nil, err
	}
	x := &connectionMakeConnectionClient{stream}
	return x, nil
}

type Connection_MakeConnectionClient interface {
	Send(*ConnectionRequest) error
	Recv() (*ConnectionResponse, error)
	grpc.ClientStream
}

type connectionMakeConnectionClient struct {
	grpc.ClientStream
}

func (x *connectionMakeConnectionClient) Send(m *ConnectionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *connectionMakeConnectionClient) Recv() (*ConnectionResponse, error) {
	m := new(ConnectionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConnectionServer is the server API for Connection service.
// All implementations should embed UnimplementedConnectionServer
// for forward compatibility
type ConnectionServer interface {
	MakeConnection(Connection_MakeConnectionServer) error
}

// UnimplementedConnectionServer should be embedded to have forward compatible implementations.
type UnimplementedConnectionServer struct {
}

func (UnimplementedConnectionServer) MakeConnection(Connection_MakeConnectionServer) error {
	return status.Errorf(codes.Unimplemented, "method MakeConnection not implemented")
}

// UnsafeConnectionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectionServer will
// result in compilation errors.
type UnsafeConnectionServer interface {
	mustEmbedUnimplementedConnectionServer()
}

func RegisterConnectionServer(s grpc.ServiceRegistrar, srv ConnectionServer) {
	s.RegisterService(&Connection_ServiceDesc, srv)
}

func _Connection_MakeConnection_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConnectionServer).MakeConnection(&connectionMakeConnectionServer{stream})
}

type Connection_MakeConnectionServer interface {
	Send(*ConnectionResponse) error
	Recv() (*ConnectionRequest, error)
	grpc.ServerStream
}

type connectionMakeConnectionServer struct {
	grpc.ServerStream
}

func (x *connectionMakeConnectionServer) Send(m *ConnectionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *connectionMakeConnectionServer) Recv() (*ConnectionRequest, error) {
	m := new(ConnectionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Connection_ServiceDesc is the grpc.ServiceDesc for Connection service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Connection_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moreh.sdamanager.Connection",
	HandlerType: (*ConnectionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MakeConnection",
			Handler:       _Connection_MakeConnection_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sdamanager_core.proto",
}

// PlatformClient is the client API for Platform service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlatformClient interface {
	StartConnection(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (Platform_StartConnectionClient, error)
	GetPlatform(ctx context.Context, in *Token, opts ...grpc.CallOption) (*PlatformResponse, error)
	GetPlatformWithFeID(ctx context.Context, in *PlatformRequest, opts ...grpc.CallOption) (*PlatformResponse, error)
	SetFinishCode(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*Empty, error)
}

type platformClient struct {
	cc grpc.ClientConnInterface
}

func NewPlatformClient(cc grpc.ClientConnInterface) PlatformClient {
	return &platformClient{cc}
}

func (c *platformClient) StartConnection(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (Platform_StartConnectionClient, error) {
	stream, err := c.cc.NewStream(ctx, &Platform_ServiceDesc.Streams[0], "/moreh.sdamanager.Platform/StartConnection", opts...)
	if err != nil {
		return nil, err
	}
	x := &platformStartConnectionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Platform_StartConnectionClient interface {
	Recv() (*ConnectionResponse, error)
	grpc.ClientStream
}

type platformStartConnectionClient struct {
	grpc.ClientStream
}

func (x *platformStartConnectionClient) Recv() (*ConnectionResponse, error) {
	m := new(ConnectionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *platformClient) GetPlatform(ctx context.Context, in *Token, opts ...grpc.CallOption) (*PlatformResponse, error) {
	out := new(PlatformResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.Platform/GetPlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) GetPlatformWithFeID(ctx context.Context, in *PlatformRequest, opts ...grpc.CallOption) (*PlatformResponse, error) {
	out := new(PlatformResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.Platform/GetPlatformWithFeID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) SetFinishCode(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.Platform/SetFinishCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlatformServer is the server API for Platform service.
// All implementations should embed UnimplementedPlatformServer
// for forward compatibility
type PlatformServer interface {
	StartConnection(*ConnectionRequest, Platform_StartConnectionServer) error
	GetPlatform(context.Context, *Token) (*PlatformResponse, error)
	GetPlatformWithFeID(context.Context, *PlatformRequest) (*PlatformResponse, error)
	SetFinishCode(context.Context, *ConnectionRequest) (*Empty, error)
}

// UnimplementedPlatformServer should be embedded to have forward compatible implementations.
type UnimplementedPlatformServer struct {
}

func (UnimplementedPlatformServer) StartConnection(*ConnectionRequest, Platform_StartConnectionServer) error {
	return status.Errorf(codes.Unimplemented, "method StartConnection not implemented")
}
func (UnimplementedPlatformServer) GetPlatform(context.Context, *Token) (*PlatformResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlatform not implemented")
}
func (UnimplementedPlatformServer) GetPlatformWithFeID(context.Context, *PlatformRequest) (*PlatformResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlatformWithFeID not implemented")
}
func (UnimplementedPlatformServer) SetFinishCode(context.Context, *ConnectionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFinishCode not implemented")
}

// UnsafePlatformServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlatformServer will
// result in compilation errors.
type UnsafePlatformServer interface {
	mustEmbedUnimplementedPlatformServer()
}

func RegisterPlatformServer(s grpc.ServiceRegistrar, srv PlatformServer) {
	s.RegisterService(&Platform_ServiceDesc, srv)
}

func _Platform_StartConnection_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlatformServer).StartConnection(m, &platformStartConnectionServer{stream})
}

type Platform_StartConnectionServer interface {
	Send(*ConnectionResponse) error
	grpc.ServerStream
}

type platformStartConnectionServer struct {
	grpc.ServerStream
}

func (x *platformStartConnectionServer) Send(m *ConnectionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Platform_GetPlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).GetPlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.Platform/GetPlatform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).GetPlatform(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_GetPlatformWithFeID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlatformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).GetPlatformWithFeID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.Platform/GetPlatformWithFeID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).GetPlatformWithFeID(ctx, req.(*PlatformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_SetFinishCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).SetFinishCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.Platform/SetFinishCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).SetFinishCode(ctx, req.(*ConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Platform_ServiceDesc is the grpc.ServiceDesc for Platform service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Platform_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moreh.sdamanager.Platform",
	HandlerType: (*PlatformServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlatform",
			Handler:    _Platform_GetPlatform_Handler,
		},
		{
			MethodName: "GetPlatformWithFeID",
			Handler:    _Platform_GetPlatformWithFeID_Handler,
		},
		{
			MethodName: "SetFinishCode",
			Handler:    _Platform_SetFinishCode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartConnection",
			Handler:       _Platform_StartConnection_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sdamanager_core.proto",
}

// FrontendHeartbeatClient is the client API for FrontendHeartbeat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrontendHeartbeatClient interface {
	Heartbeat(ctx context.Context, in *FrontendID, opts ...grpc.CallOption) (*Boolean, error)
	HeartbeatNew(ctx context.Context, in *FrontendID, opts ...grpc.CallOption) (*HeartbeatResponse, error)
}

type frontendHeartbeatClient struct {
	cc grpc.ClientConnInterface
}

func NewFrontendHeartbeatClient(cc grpc.ClientConnInterface) FrontendHeartbeatClient {
	return &frontendHeartbeatClient{cc}
}

func (c *frontendHeartbeatClient) Heartbeat(ctx context.Context, in *FrontendID, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.FrontendHeartbeat/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendHeartbeatClient) HeartbeatNew(ctx context.Context, in *FrontendID, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.FrontendHeartbeat/Heartbeat_new", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontendHeartbeatServer is the server API for FrontendHeartbeat service.
// All implementations should embed UnimplementedFrontendHeartbeatServer
// for forward compatibility
type FrontendHeartbeatServer interface {
	Heartbeat(context.Context, *FrontendID) (*Boolean, error)
	HeartbeatNew(context.Context, *FrontendID) (*HeartbeatResponse, error)
}

// UnimplementedFrontendHeartbeatServer should be embedded to have forward compatible implementations.
type UnimplementedFrontendHeartbeatServer struct {
}

func (UnimplementedFrontendHeartbeatServer) Heartbeat(context.Context, *FrontendID) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedFrontendHeartbeatServer) HeartbeatNew(context.Context, *FrontendID) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartbeatNew not implemented")
}

// UnsafeFrontendHeartbeatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrontendHeartbeatServer will
// result in compilation errors.
type UnsafeFrontendHeartbeatServer interface {
	mustEmbedUnimplementedFrontendHeartbeatServer()
}

func RegisterFrontendHeartbeatServer(s grpc.ServiceRegistrar, srv FrontendHeartbeatServer) {
	s.RegisterService(&FrontendHeartbeat_ServiceDesc, srv)
}

func _FrontendHeartbeat_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrontendID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendHeartbeatServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.FrontendHeartbeat/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendHeartbeatServer).Heartbeat(ctx, req.(*FrontendID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendHeartbeat_HeartbeatNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrontendID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendHeartbeatServer).HeartbeatNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.FrontendHeartbeat/Heartbeat_new",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendHeartbeatServer).HeartbeatNew(ctx, req.(*FrontendID))
	}
	return interceptor(ctx, in, info, handler)
}

// FrontendHeartbeat_ServiceDesc is the grpc.ServiceDesc for FrontendHeartbeat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FrontendHeartbeat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moreh.sdamanager.FrontendHeartbeat",
	HandlerType: (*FrontendHeartbeatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _FrontendHeartbeat_Heartbeat_Handler,
		},
		{
			MethodName: "Heartbeat_new",
			Handler:    _FrontendHeartbeat_HeartbeatNew_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sdamanager_core.proto",
}
