// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: sdamanager_api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserAPIClient is the client API for UserAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAPIClient interface {
	ListSDAModel(ctx context.Context, in *Token, opts ...grpc.CallOption) (*SDAModelList, error)
	CreateSDAModel(ctx context.Context, in *CreateSDAModelRequest, opts ...grpc.CallOption) (*CreateSDAModelResponse, error)
	DeleteSDAModel(ctx context.Context, in *DeleteSDAModelRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	CreateSDA(ctx context.Context, in *CreateSDARequest, opts ...grpc.CallOption) (*CreateSDAResponse, error)
	GetSDAInfo(ctx context.Context, in *Token, opts ...grpc.CallOption) (*GetSDAInfoResponse, error)
	ListSDA(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SDAList, error)
	UpdateSDA(ctx context.Context, in *UpdateSDARequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	DeleteSDA(ctx context.Context, in *DeleteSDARequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	CreateToken(ctx context.Context, in *CreateTokenRequest, opts ...grpc.CallOption) (*CreateTokenResponse, error)
	ListToken(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TokenList, error)
	GetToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*GetTokenResponse, error)
	UpdateToken(ctx context.Context, in *UpdateTokenRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	DeleteToken(ctx context.Context, in *DeleteTokenRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	ListBackend(ctx context.Context, in *BackendListRequest, opts ...grpc.CallOption) (*BackendList, error)
	GetBackend(ctx context.Context, in *GetBackendRequest, opts ...grpc.CallOption) (*GetBackendResponse, error)
	ReleaseDevice(ctx context.Context, in *ReleaseDeviceRequest, opts ...grpc.CallOption) (*ReleaseDeviceResponse, error)
	ReleaseAllDevice(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Boolean, error)
	ListSDAUtilizations(ctx context.Context, in *ListSDAUtilizationsRequest, opts ...grpc.CallOption) (*ListSDAUtilizationsResponse, error)
	ListSDAJob(ctx context.Context, in *GetSDAUtilizationsRequest, opts ...grpc.CallOption) (*GetSDAUtilizationsResponse, error)
	GetSDAUtilizations(ctx context.Context, in *GetSDAUtilizationsRequest, opts ...grpc.CallOption) (*GetSDAUtilizationsResponse, error)
	ListJobQueue(ctx context.Context, in *JobQueueRequest, opts ...grpc.CallOption) (*JobQueueList, error)
	UpdateJobPriority(ctx context.Context, in *UpdateJobPriorityRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	ListJobHistory(ctx context.Context, in *JobHistoryRequest, opts ...grpc.CallOption) (*JobHistoryList, error)
	GetVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Version, error)
	GetServerVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListServerVersion, error)
	ListEventLog(ctx context.Context, in *EventLogRequest, opts ...grpc.CallOption) (*EventLogList, error)
	CreateBackend(ctx context.Context, in *CreateBackendRequest, opts ...grpc.CallOption) (*CreateBackendResponse, error)
	DeleteBackend(ctx context.Context, in *DeleteBackendRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	UpdateBackend(ctx context.Context, in *UpdateBackendRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	CreateVersionInfo(ctx context.Context, in *CreateVersionInfoRequest, opts ...grpc.CallOption) (*CreateVersionInfoResponse, error)
	DeleteVersionInfo(ctx context.Context, in *DeleteVersionInfoRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	UpdateVersionInfo(ctx context.Context, in *UpdateVersionInfoRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	ListVersionInfo(ctx context.Context, in *Version, opts ...grpc.CallOption) (*VersionInfoList, error)
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	ListGroup(ctx context.Context, in *ListGroupRequest, opts ...grpc.CallOption) (*GroupList, error)
	ChangeGroup(ctx context.Context, in *ChangeGroupRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	ListRelation(ctx context.Context, in *ListRelationRequest, opts ...grpc.CallOption) (*RelationList, error)
	GetDeviceUsage(ctx context.Context, in *DeviceUsageRequest, opts ...grpc.CallOption) (*DeviceUsageResponse, error)
	ListTokenUsage(ctx context.Context, in *ListTokenUsageRequest, opts ...grpc.CallOption) (*ListTokenUsageResponse, error)
	ListConfigure(ctx context.Context, in *ListConfigureRequest, opts ...grpc.CallOption) (*ListConfigureResponse, error)
	GetConfigure(ctx context.Context, in *GetConfigureRequest, opts ...grpc.CallOption) (*Configure, error)
	UpdateConfigure(ctx context.Context, in *UpdateConfigureRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
}

type userAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAPIClient(cc grpc.ClientConnInterface) UserAPIClient {
	return &userAPIClient{cc}
}

func (c *userAPIClient) ListSDAModel(ctx context.Context, in *Token, opts ...grpc.CallOption) (*SDAModelList, error) {
	out := new(SDAModelList)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/ListSDAModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) CreateSDAModel(ctx context.Context, in *CreateSDAModelRequest, opts ...grpc.CallOption) (*CreateSDAModelResponse, error) {
	out := new(CreateSDAModelResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/CreateSDAModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) DeleteSDAModel(ctx context.Context, in *DeleteSDAModelRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/DeleteSDAModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) CreateSDA(ctx context.Context, in *CreateSDARequest, opts ...grpc.CallOption) (*CreateSDAResponse, error) {
	out := new(CreateSDAResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/CreateSDA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetSDAInfo(ctx context.Context, in *Token, opts ...grpc.CallOption) (*GetSDAInfoResponse, error) {
	out := new(GetSDAInfoResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/GetSDAInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ListSDA(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SDAList, error) {
	out := new(SDAList)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/ListSDA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) UpdateSDA(ctx context.Context, in *UpdateSDARequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/UpdateSDA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) DeleteSDA(ctx context.Context, in *DeleteSDARequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/DeleteSDA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) CreateToken(ctx context.Context, in *CreateTokenRequest, opts ...grpc.CallOption) (*CreateTokenResponse, error) {
	out := new(CreateTokenResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/CreateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ListToken(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TokenList, error) {
	out := new(TokenList)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/ListToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*GetTokenResponse, error) {
	out := new(GetTokenResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) UpdateToken(ctx context.Context, in *UpdateTokenRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/UpdateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) DeleteToken(ctx context.Context, in *DeleteTokenRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/DeleteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ListBackend(ctx context.Context, in *BackendListRequest, opts ...grpc.CallOption) (*BackendList, error) {
	out := new(BackendList)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/ListBackend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetBackend(ctx context.Context, in *GetBackendRequest, opts ...grpc.CallOption) (*GetBackendResponse, error) {
	out := new(GetBackendResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/GetBackend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ReleaseDevice(ctx context.Context, in *ReleaseDeviceRequest, opts ...grpc.CallOption) (*ReleaseDeviceResponse, error) {
	out := new(ReleaseDeviceResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/ReleaseDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ReleaseAllDevice(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/ReleaseAllDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ListSDAUtilizations(ctx context.Context, in *ListSDAUtilizationsRequest, opts ...grpc.CallOption) (*ListSDAUtilizationsResponse, error) {
	out := new(ListSDAUtilizationsResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/ListSDAUtilizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ListSDAJob(ctx context.Context, in *GetSDAUtilizationsRequest, opts ...grpc.CallOption) (*GetSDAUtilizationsResponse, error) {
	out := new(GetSDAUtilizationsResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/ListSDAJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetSDAUtilizations(ctx context.Context, in *GetSDAUtilizationsRequest, opts ...grpc.CallOption) (*GetSDAUtilizationsResponse, error) {
	out := new(GetSDAUtilizationsResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/GetSDAUtilizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ListJobQueue(ctx context.Context, in *JobQueueRequest, opts ...grpc.CallOption) (*JobQueueList, error) {
	out := new(JobQueueList)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/ListJobQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) UpdateJobPriority(ctx context.Context, in *UpdateJobPriorityRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/UpdateJobPriority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ListJobHistory(ctx context.Context, in *JobHistoryRequest, opts ...grpc.CallOption) (*JobHistoryList, error) {
	out := new(JobHistoryList)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/ListJobHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetServerVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListServerVersion, error) {
	out := new(ListServerVersion)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/GetServerVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ListEventLog(ctx context.Context, in *EventLogRequest, opts ...grpc.CallOption) (*EventLogList, error) {
	out := new(EventLogList)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/ListEventLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) CreateBackend(ctx context.Context, in *CreateBackendRequest, opts ...grpc.CallOption) (*CreateBackendResponse, error) {
	out := new(CreateBackendResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/CreateBackend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) DeleteBackend(ctx context.Context, in *DeleteBackendRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/DeleteBackend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) UpdateBackend(ctx context.Context, in *UpdateBackendRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/UpdateBackend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/UpdateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) CreateVersionInfo(ctx context.Context, in *CreateVersionInfoRequest, opts ...grpc.CallOption) (*CreateVersionInfoResponse, error) {
	out := new(CreateVersionInfoResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/CreateVersionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) DeleteVersionInfo(ctx context.Context, in *DeleteVersionInfoRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/DeleteVersionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) UpdateVersionInfo(ctx context.Context, in *UpdateVersionInfoRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/UpdateVersionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ListVersionInfo(ctx context.Context, in *Version, opts ...grpc.CallOption) (*VersionInfoList, error) {
	out := new(VersionInfoList)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/ListVersionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error) {
	out := new(CreateGroupResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ListGroup(ctx context.Context, in *ListGroupRequest, opts ...grpc.CallOption) (*GroupList, error) {
	out := new(GroupList)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/ListGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ChangeGroup(ctx context.Context, in *ChangeGroupRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/ChangeGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ListRelation(ctx context.Context, in *ListRelationRequest, opts ...grpc.CallOption) (*RelationList, error) {
	out := new(RelationList)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/ListRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetDeviceUsage(ctx context.Context, in *DeviceUsageRequest, opts ...grpc.CallOption) (*DeviceUsageResponse, error) {
	out := new(DeviceUsageResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/GetDeviceUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ListTokenUsage(ctx context.Context, in *ListTokenUsageRequest, opts ...grpc.CallOption) (*ListTokenUsageResponse, error) {
	out := new(ListTokenUsageResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/ListTokenUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ListConfigure(ctx context.Context, in *ListConfigureRequest, opts ...grpc.CallOption) (*ListConfigureResponse, error) {
	out := new(ListConfigureResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/ListConfigure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetConfigure(ctx context.Context, in *GetConfigureRequest, opts ...grpc.CallOption) (*Configure, error) {
	out := new(Configure)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/GetConfigure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) UpdateConfigure(ctx context.Context, in *UpdateConfigureRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.UserAPI/UpdateConfigure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAPIServer is the server API for UserAPI service.
// All implementations should embed UnimplementedUserAPIServer
// for forward compatibility
type UserAPIServer interface {
	ListSDAModel(context.Context, *Token) (*SDAModelList, error)
	CreateSDAModel(context.Context, *CreateSDAModelRequest) (*CreateSDAModelResponse, error)
	DeleteSDAModel(context.Context, *DeleteSDAModelRequest) (*DeleteResponse, error)
	CreateSDA(context.Context, *CreateSDARequest) (*CreateSDAResponse, error)
	GetSDAInfo(context.Context, *Token) (*GetSDAInfoResponse, error)
	ListSDA(context.Context, *Empty) (*SDAList, error)
	UpdateSDA(context.Context, *UpdateSDARequest) (*UpdateResponse, error)
	DeleteSDA(context.Context, *DeleteSDARequest) (*DeleteResponse, error)
	CreateToken(context.Context, *CreateTokenRequest) (*CreateTokenResponse, error)
	ListToken(context.Context, *Empty) (*TokenList, error)
	GetToken(context.Context, *Token) (*GetTokenResponse, error)
	UpdateToken(context.Context, *UpdateTokenRequest) (*UpdateResponse, error)
	DeleteToken(context.Context, *DeleteTokenRequest) (*DeleteResponse, error)
	ListBackend(context.Context, *BackendListRequest) (*BackendList, error)
	GetBackend(context.Context, *GetBackendRequest) (*GetBackendResponse, error)
	ReleaseDevice(context.Context, *ReleaseDeviceRequest) (*ReleaseDeviceResponse, error)
	ReleaseAllDevice(context.Context, *Empty) (*Boolean, error)
	ListSDAUtilizations(context.Context, *ListSDAUtilizationsRequest) (*ListSDAUtilizationsResponse, error)
	ListSDAJob(context.Context, *GetSDAUtilizationsRequest) (*GetSDAUtilizationsResponse, error)
	GetSDAUtilizations(context.Context, *GetSDAUtilizationsRequest) (*GetSDAUtilizationsResponse, error)
	ListJobQueue(context.Context, *JobQueueRequest) (*JobQueueList, error)
	UpdateJobPriority(context.Context, *UpdateJobPriorityRequest) (*UpdateResponse, error)
	ListJobHistory(context.Context, *JobHistoryRequest) (*JobHistoryList, error)
	GetVersion(context.Context, *Empty) (*Version, error)
	GetServerVersion(context.Context, *Empty) (*ListServerVersion, error)
	ListEventLog(context.Context, *EventLogRequest) (*EventLogList, error)
	CreateBackend(context.Context, *CreateBackendRequest) (*CreateBackendResponse, error)
	DeleteBackend(context.Context, *DeleteBackendRequest) (*DeleteResponse, error)
	UpdateBackend(context.Context, *UpdateBackendRequest) (*UpdateResponse, error)
	UpdateDevice(context.Context, *UpdateDeviceRequest) (*UpdateResponse, error)
	CreateVersionInfo(context.Context, *CreateVersionInfoRequest) (*CreateVersionInfoResponse, error)
	DeleteVersionInfo(context.Context, *DeleteVersionInfoRequest) (*DeleteResponse, error)
	UpdateVersionInfo(context.Context, *UpdateVersionInfoRequest) (*UpdateResponse, error)
	ListVersionInfo(context.Context, *Version) (*VersionInfoList, error)
	CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error)
	DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteResponse, error)
	UpdateGroup(context.Context, *UpdateGroupRequest) (*UpdateResponse, error)
	ListGroup(context.Context, *ListGroupRequest) (*GroupList, error)
	ChangeGroup(context.Context, *ChangeGroupRequest) (*UpdateResponse, error)
	ListRelation(context.Context, *ListRelationRequest) (*RelationList, error)
	GetDeviceUsage(context.Context, *DeviceUsageRequest) (*DeviceUsageResponse, error)
	ListTokenUsage(context.Context, *ListTokenUsageRequest) (*ListTokenUsageResponse, error)
	ListConfigure(context.Context, *ListConfigureRequest) (*ListConfigureResponse, error)
	GetConfigure(context.Context, *GetConfigureRequest) (*Configure, error)
	UpdateConfigure(context.Context, *UpdateConfigureRequest) (*UpdateResponse, error)
}

// UnimplementedUserAPIServer should be embedded to have forward compatible implementations.
type UnimplementedUserAPIServer struct {
}

func (UnimplementedUserAPIServer) ListSDAModel(context.Context, *Token) (*SDAModelList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSDAModel not implemented")
}
func (UnimplementedUserAPIServer) CreateSDAModel(context.Context, *CreateSDAModelRequest) (*CreateSDAModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSDAModel not implemented")
}
func (UnimplementedUserAPIServer) DeleteSDAModel(context.Context, *DeleteSDAModelRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSDAModel not implemented")
}
func (UnimplementedUserAPIServer) CreateSDA(context.Context, *CreateSDARequest) (*CreateSDAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSDA not implemented")
}
func (UnimplementedUserAPIServer) GetSDAInfo(context.Context, *Token) (*GetSDAInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSDAInfo not implemented")
}
func (UnimplementedUserAPIServer) ListSDA(context.Context, *Empty) (*SDAList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSDA not implemented")
}
func (UnimplementedUserAPIServer) UpdateSDA(context.Context, *UpdateSDARequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSDA not implemented")
}
func (UnimplementedUserAPIServer) DeleteSDA(context.Context, *DeleteSDARequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSDA not implemented")
}
func (UnimplementedUserAPIServer) CreateToken(context.Context, *CreateTokenRequest) (*CreateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (UnimplementedUserAPIServer) ListToken(context.Context, *Empty) (*TokenList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListToken not implemented")
}
func (UnimplementedUserAPIServer) GetToken(context.Context, *Token) (*GetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedUserAPIServer) UpdateToken(context.Context, *UpdateTokenRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateToken not implemented")
}
func (UnimplementedUserAPIServer) DeleteToken(context.Context, *DeleteTokenRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteToken not implemented")
}
func (UnimplementedUserAPIServer) ListBackend(context.Context, *BackendListRequest) (*BackendList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBackend not implemented")
}
func (UnimplementedUserAPIServer) GetBackend(context.Context, *GetBackendRequest) (*GetBackendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackend not implemented")
}
func (UnimplementedUserAPIServer) ReleaseDevice(context.Context, *ReleaseDeviceRequest) (*ReleaseDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseDevice not implemented")
}
func (UnimplementedUserAPIServer) ReleaseAllDevice(context.Context, *Empty) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseAllDevice not implemented")
}
func (UnimplementedUserAPIServer) ListSDAUtilizations(context.Context, *ListSDAUtilizationsRequest) (*ListSDAUtilizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSDAUtilizations not implemented")
}
func (UnimplementedUserAPIServer) ListSDAJob(context.Context, *GetSDAUtilizationsRequest) (*GetSDAUtilizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSDAJob not implemented")
}
func (UnimplementedUserAPIServer) GetSDAUtilizations(context.Context, *GetSDAUtilizationsRequest) (*GetSDAUtilizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSDAUtilizations not implemented")
}
func (UnimplementedUserAPIServer) ListJobQueue(context.Context, *JobQueueRequest) (*JobQueueList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobQueue not implemented")
}
func (UnimplementedUserAPIServer) UpdateJobPriority(context.Context, *UpdateJobPriorityRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobPriority not implemented")
}
func (UnimplementedUserAPIServer) ListJobHistory(context.Context, *JobHistoryRequest) (*JobHistoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobHistory not implemented")
}
func (UnimplementedUserAPIServer) GetVersion(context.Context, *Empty) (*Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedUserAPIServer) GetServerVersion(context.Context, *Empty) (*ListServerVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerVersion not implemented")
}
func (UnimplementedUserAPIServer) ListEventLog(context.Context, *EventLogRequest) (*EventLogList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventLog not implemented")
}
func (UnimplementedUserAPIServer) CreateBackend(context.Context, *CreateBackendRequest) (*CreateBackendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBackend not implemented")
}
func (UnimplementedUserAPIServer) DeleteBackend(context.Context, *DeleteBackendRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBackend not implemented")
}
func (UnimplementedUserAPIServer) UpdateBackend(context.Context, *UpdateBackendRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBackend not implemented")
}
func (UnimplementedUserAPIServer) UpdateDevice(context.Context, *UpdateDeviceRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (UnimplementedUserAPIServer) CreateVersionInfo(context.Context, *CreateVersionInfoRequest) (*CreateVersionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVersionInfo not implemented")
}
func (UnimplementedUserAPIServer) DeleteVersionInfo(context.Context, *DeleteVersionInfoRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVersionInfo not implemented")
}
func (UnimplementedUserAPIServer) UpdateVersionInfo(context.Context, *UpdateVersionInfoRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVersionInfo not implemented")
}
func (UnimplementedUserAPIServer) ListVersionInfo(context.Context, *Version) (*VersionInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVersionInfo not implemented")
}
func (UnimplementedUserAPIServer) CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedUserAPIServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedUserAPIServer) UpdateGroup(context.Context, *UpdateGroupRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedUserAPIServer) ListGroup(context.Context, *ListGroupRequest) (*GroupList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroup not implemented")
}
func (UnimplementedUserAPIServer) ChangeGroup(context.Context, *ChangeGroupRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeGroup not implemented")
}
func (UnimplementedUserAPIServer) ListRelation(context.Context, *ListRelationRequest) (*RelationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRelation not implemented")
}
func (UnimplementedUserAPIServer) GetDeviceUsage(context.Context, *DeviceUsageRequest) (*DeviceUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceUsage not implemented")
}
func (UnimplementedUserAPIServer) ListTokenUsage(context.Context, *ListTokenUsageRequest) (*ListTokenUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTokenUsage not implemented")
}
func (UnimplementedUserAPIServer) ListConfigure(context.Context, *ListConfigureRequest) (*ListConfigureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfigure not implemented")
}
func (UnimplementedUserAPIServer) GetConfigure(context.Context, *GetConfigureRequest) (*Configure, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigure not implemented")
}
func (UnimplementedUserAPIServer) UpdateConfigure(context.Context, *UpdateConfigureRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfigure not implemented")
}

// UnsafeUserAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAPIServer will
// result in compilation errors.
type UnsafeUserAPIServer interface {
	mustEmbedUnimplementedUserAPIServer()
}

func RegisterUserAPIServer(s grpc.ServiceRegistrar, srv UserAPIServer) {
	s.RegisterService(&UserAPI_ServiceDesc, srv)
}

func _UserAPI_ListSDAModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ListSDAModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/ListSDAModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ListSDAModel(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_CreateSDAModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSDAModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).CreateSDAModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/CreateSDAModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).CreateSDAModel(ctx, req.(*CreateSDAModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_DeleteSDAModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSDAModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).DeleteSDAModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/DeleteSDAModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).DeleteSDAModel(ctx, req.(*DeleteSDAModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_CreateSDA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSDARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).CreateSDA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/CreateSDA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).CreateSDA(ctx, req.(*CreateSDARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetSDAInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetSDAInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/GetSDAInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetSDAInfo(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ListSDA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ListSDA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/ListSDA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ListSDA(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_UpdateSDA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSDARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).UpdateSDA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/UpdateSDA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).UpdateSDA(ctx, req.(*UpdateSDARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_DeleteSDA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSDARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).DeleteSDA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/DeleteSDA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).DeleteSDA(ctx, req.(*DeleteSDARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/CreateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).CreateToken(ctx, req.(*CreateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ListToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ListToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/ListToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ListToken(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_UpdateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).UpdateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/UpdateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).UpdateToken(ctx, req.(*UpdateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_DeleteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).DeleteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/DeleteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).DeleteToken(ctx, req.(*DeleteTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ListBackend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ListBackend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/ListBackend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ListBackend(ctx, req.(*BackendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetBackend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetBackend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/GetBackend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetBackend(ctx, req.(*GetBackendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ReleaseDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ReleaseDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/ReleaseDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ReleaseDevice(ctx, req.(*ReleaseDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ReleaseAllDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ReleaseAllDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/ReleaseAllDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ReleaseAllDevice(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ListSDAUtilizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSDAUtilizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ListSDAUtilizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/ListSDAUtilizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ListSDAUtilizations(ctx, req.(*ListSDAUtilizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ListSDAJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSDAUtilizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ListSDAJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/ListSDAJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ListSDAJob(ctx, req.(*GetSDAUtilizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetSDAUtilizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSDAUtilizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetSDAUtilizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/GetSDAUtilizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetSDAUtilizations(ctx, req.(*GetSDAUtilizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ListJobQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ListJobQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/ListJobQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ListJobQueue(ctx, req.(*JobQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_UpdateJobPriority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobPriorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).UpdateJobPriority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/UpdateJobPriority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).UpdateJobPriority(ctx, req.(*UpdateJobPriorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ListJobHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ListJobHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/ListJobHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ListJobHistory(ctx, req.(*JobHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetVersion(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetServerVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetServerVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/GetServerVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetServerVersion(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ListEventLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ListEventLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/ListEventLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ListEventLog(ctx, req.(*EventLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_CreateBackend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBackendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).CreateBackend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/CreateBackend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).CreateBackend(ctx, req.(*CreateBackendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_DeleteBackend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBackendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).DeleteBackend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/DeleteBackend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).DeleteBackend(ctx, req.(*DeleteBackendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_UpdateBackend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBackendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).UpdateBackend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/UpdateBackend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).UpdateBackend(ctx, req.(*UpdateBackendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/UpdateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).UpdateDevice(ctx, req.(*UpdateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_CreateVersionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVersionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).CreateVersionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/CreateVersionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).CreateVersionInfo(ctx, req.(*CreateVersionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_DeleteVersionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVersionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).DeleteVersionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/DeleteVersionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).DeleteVersionInfo(ctx, req.(*DeleteVersionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_UpdateVersionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVersionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).UpdateVersionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/UpdateVersionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).UpdateVersionInfo(ctx, req.(*UpdateVersionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ListVersionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Version)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ListVersionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/ListVersionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ListVersionInfo(ctx, req.(*Version))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).UpdateGroup(ctx, req.(*UpdateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ListGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ListGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/ListGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ListGroup(ctx, req.(*ListGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ChangeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ChangeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/ChangeGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ChangeGroup(ctx, req.(*ChangeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ListRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ListRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/ListRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ListRelation(ctx, req.(*ListRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetDeviceUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetDeviceUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/GetDeviceUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetDeviceUsage(ctx, req.(*DeviceUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ListTokenUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTokenUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ListTokenUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/ListTokenUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ListTokenUsage(ctx, req.(*ListTokenUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ListConfigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ListConfigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/ListConfigure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ListConfigure(ctx, req.(*ListConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetConfigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetConfigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/GetConfigure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetConfigure(ctx, req.(*GetConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_UpdateConfigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).UpdateConfigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.UserAPI/UpdateConfigure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).UpdateConfigure(ctx, req.(*UpdateConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAPI_ServiceDesc is the grpc.ServiceDesc for UserAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moreh.sdamanager.UserAPI",
	HandlerType: (*UserAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSDAModel",
			Handler:    _UserAPI_ListSDAModel_Handler,
		},
		{
			MethodName: "CreateSDAModel",
			Handler:    _UserAPI_CreateSDAModel_Handler,
		},
		{
			MethodName: "DeleteSDAModel",
			Handler:    _UserAPI_DeleteSDAModel_Handler,
		},
		{
			MethodName: "CreateSDA",
			Handler:    _UserAPI_CreateSDA_Handler,
		},
		{
			MethodName: "GetSDAInfo",
			Handler:    _UserAPI_GetSDAInfo_Handler,
		},
		{
			MethodName: "ListSDA",
			Handler:    _UserAPI_ListSDA_Handler,
		},
		{
			MethodName: "UpdateSDA",
			Handler:    _UserAPI_UpdateSDA_Handler,
		},
		{
			MethodName: "DeleteSDA",
			Handler:    _UserAPI_DeleteSDA_Handler,
		},
		{
			MethodName: "CreateToken",
			Handler:    _UserAPI_CreateToken_Handler,
		},
		{
			MethodName: "ListToken",
			Handler:    _UserAPI_ListToken_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _UserAPI_GetToken_Handler,
		},
		{
			MethodName: "UpdateToken",
			Handler:    _UserAPI_UpdateToken_Handler,
		},
		{
			MethodName: "DeleteToken",
			Handler:    _UserAPI_DeleteToken_Handler,
		},
		{
			MethodName: "ListBackend",
			Handler:    _UserAPI_ListBackend_Handler,
		},
		{
			MethodName: "GetBackend",
			Handler:    _UserAPI_GetBackend_Handler,
		},
		{
			MethodName: "ReleaseDevice",
			Handler:    _UserAPI_ReleaseDevice_Handler,
		},
		{
			MethodName: "ReleaseAllDevice",
			Handler:    _UserAPI_ReleaseAllDevice_Handler,
		},
		{
			MethodName: "ListSDAUtilizations",
			Handler:    _UserAPI_ListSDAUtilizations_Handler,
		},
		{
			MethodName: "ListSDAJob",
			Handler:    _UserAPI_ListSDAJob_Handler,
		},
		{
			MethodName: "GetSDAUtilizations",
			Handler:    _UserAPI_GetSDAUtilizations_Handler,
		},
		{
			MethodName: "ListJobQueue",
			Handler:    _UserAPI_ListJobQueue_Handler,
		},
		{
			MethodName: "UpdateJobPriority",
			Handler:    _UserAPI_UpdateJobPriority_Handler,
		},
		{
			MethodName: "ListJobHistory",
			Handler:    _UserAPI_ListJobHistory_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _UserAPI_GetVersion_Handler,
		},
		{
			MethodName: "GetServerVersion",
			Handler:    _UserAPI_GetServerVersion_Handler,
		},
		{
			MethodName: "ListEventLog",
			Handler:    _UserAPI_ListEventLog_Handler,
		},
		{
			MethodName: "CreateBackend",
			Handler:    _UserAPI_CreateBackend_Handler,
		},
		{
			MethodName: "DeleteBackend",
			Handler:    _UserAPI_DeleteBackend_Handler,
		},
		{
			MethodName: "UpdateBackend",
			Handler:    _UserAPI_UpdateBackend_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _UserAPI_UpdateDevice_Handler,
		},
		{
			MethodName: "CreateVersionInfo",
			Handler:    _UserAPI_CreateVersionInfo_Handler,
		},
		{
			MethodName: "DeleteVersionInfo",
			Handler:    _UserAPI_DeleteVersionInfo_Handler,
		},
		{
			MethodName: "UpdateVersionInfo",
			Handler:    _UserAPI_UpdateVersionInfo_Handler,
		},
		{
			MethodName: "ListVersionInfo",
			Handler:    _UserAPI_ListVersionInfo_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _UserAPI_CreateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _UserAPI_DeleteGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _UserAPI_UpdateGroup_Handler,
		},
		{
			MethodName: "ListGroup",
			Handler:    _UserAPI_ListGroup_Handler,
		},
		{
			MethodName: "ChangeGroup",
			Handler:    _UserAPI_ChangeGroup_Handler,
		},
		{
			MethodName: "ListRelation",
			Handler:    _UserAPI_ListRelation_Handler,
		},
		{
			MethodName: "GetDeviceUsage",
			Handler:    _UserAPI_GetDeviceUsage_Handler,
		},
		{
			MethodName: "ListTokenUsage",
			Handler:    _UserAPI_ListTokenUsage_Handler,
		},
		{
			MethodName: "ListConfigure",
			Handler:    _UserAPI_ListConfigure_Handler,
		},
		{
			MethodName: "GetConfigure",
			Handler:    _UserAPI_GetConfigure_Handler,
		},
		{
			MethodName: "UpdateConfigure",
			Handler:    _UserAPI_UpdateConfigure_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sdamanager_api.proto",
}
