// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.1
// source: sdamanager_api.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventAction int32

const (
	EventAction_NONE_ACTION     EventAction = 0
	EventAction_CREATE_SDA      EventAction = 1
	EventAction_UPDATE_SDA      EventAction = 2
	EventAction_DELETE_SDA      EventAction = 3
	EventAction_CREATE_SDAMODEL EventAction = 4
	EventAction_DELETE_SDAMODEL EventAction = 5
	EventAction_CREATE_BACKEND  EventAction = 6
	EventAction_UPDATE_BACKEND  EventAction = 7
	EventAction_DELETE_BACKEND  EventAction = 8
	EventAction_UPDATE_DEVICE   EventAction = 9
	EventAction_CREATE_VERSION  EventAction = 10
	EventAction_UPDATE_VERSION  EventAction = 11
	EventAction_DELETE_VERSION  EventAction = 12
)

// Enum value maps for EventAction.
var (
	EventAction_name = map[int32]string{
		0:  "NONE_ACTION",
		1:  "CREATE_SDA",
		2:  "UPDATE_SDA",
		3:  "DELETE_SDA",
		4:  "CREATE_SDAMODEL",
		5:  "DELETE_SDAMODEL",
		6:  "CREATE_BACKEND",
		7:  "UPDATE_BACKEND",
		8:  "DELETE_BACKEND",
		9:  "UPDATE_DEVICE",
		10: "CREATE_VERSION",
		11: "UPDATE_VERSION",
		12: "DELETE_VERSION",
	}
	EventAction_value = map[string]int32{
		"NONE_ACTION":     0,
		"CREATE_SDA":      1,
		"UPDATE_SDA":      2,
		"DELETE_SDA":      3,
		"CREATE_SDAMODEL": 4,
		"DELETE_SDAMODEL": 5,
		"CREATE_BACKEND":  6,
		"UPDATE_BACKEND":  7,
		"DELETE_BACKEND":  8,
		"UPDATE_DEVICE":   9,
		"CREATE_VERSION":  10,
		"UPDATE_VERSION":  11,
		"DELETE_VERSION":  12,
	}
)

func (x EventAction) Enum() *EventAction {
	p := new(EventAction)
	*p = x
	return p
}

func (x EventAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventAction) Descriptor() protoreflect.EnumDescriptor {
	return file_sdamanager_api_proto_enumTypes[0].Descriptor()
}

func (EventAction) Type() protoreflect.EnumType {
	return &file_sdamanager_api_proto_enumTypes[0]
}

func (x EventAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventAction.Descriptor instead.
func (EventAction) EnumDescriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{0}
}

type BackendListRequest_OrderBy int32

const (
	BackendListRequest_ID         BackendListRequest_OrderBy = 0
	BackendListRequest_NAME       BackendListRequest_OrderBy = 1
	BackendListRequest_GROUP_NAME BackendListRequest_OrderBy = 2
)

// Enum value maps for BackendListRequest_OrderBy.
var (
	BackendListRequest_OrderBy_name = map[int32]string{
		0: "ID",
		1: "NAME",
		2: "GROUP_NAME",
	}
	BackendListRequest_OrderBy_value = map[string]int32{
		"ID":         0,
		"NAME":       1,
		"GROUP_NAME": 2,
	}
)

func (x BackendListRequest_OrderBy) Enum() *BackendListRequest_OrderBy {
	p := new(BackendListRequest_OrderBy)
	*p = x
	return p
}

func (x BackendListRequest_OrderBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackendListRequest_OrderBy) Descriptor() protoreflect.EnumDescriptor {
	return file_sdamanager_api_proto_enumTypes[1].Descriptor()
}

func (BackendListRequest_OrderBy) Type() protoreflect.EnumType {
	return &file_sdamanager_api_proto_enumTypes[1]
}

func (x BackendListRequest_OrderBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BackendListRequest_OrderBy.Descriptor instead.
func (BackendListRequest_OrderBy) EnumDescriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{26, 0}
}

type Referer_Protocol int32

const (
	Referer_NONE Referer_Protocol = 0
	Referer_HTTP Referer_Protocol = 1
	Referer_GRPC Referer_Protocol = 2
)

// Enum value maps for Referer_Protocol.
var (
	Referer_Protocol_name = map[int32]string{
		0: "NONE",
		1: "HTTP",
		2: "GRPC",
	}
	Referer_Protocol_value = map[string]int32{
		"NONE": 0,
		"HTTP": 1,
		"GRPC": 2,
	}
)

func (x Referer_Protocol) Enum() *Referer_Protocol {
	p := new(Referer_Protocol)
	*p = x
	return p
}

func (x Referer_Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Referer_Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_sdamanager_api_proto_enumTypes[2].Descriptor()
}

func (Referer_Protocol) Type() protoreflect.EnumType {
	return &file_sdamanager_api_proto_enumTypes[2]
}

func (x Referer_Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Referer_Protocol.Descriptor instead.
func (Referer_Protocol) EnumDescriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{36, 0}
}

type CreateSDAModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sdamodel *SDAModel `protobuf:"bytes,1,opt,name=sdamodel,proto3" json:"sdamodel,omitempty"`
	Referer  *Referer  `protobuf:"bytes,2,opt,name=referer,proto3" json:"referer,omitempty"`
}

func (x *CreateSDAModelRequest) Reset() {
	*x = CreateSDAModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSDAModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSDAModelRequest) ProtoMessage() {}

func (x *CreateSDAModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSDAModelRequest.ProtoReflect.Descriptor instead.
func (*CreateSDAModelRequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSDAModelRequest) GetSdamodel() *SDAModel {
	if x != nil {
		return x.Sdamodel
	}
	return nil
}

func (x *CreateSDAModelRequest) GetReferer() *Referer {
	if x != nil {
		return x.Referer
	}
	return nil
}

type DeleteSDAModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SdamodelId int32    `protobuf:"varint,1,opt,name=sdamodel_id,json=sdamodelId,proto3" json:"sdamodel_id,omitempty"`
	Referer    *Referer `protobuf:"bytes,2,opt,name=referer,proto3" json:"referer,omitempty"`
}

func (x *DeleteSDAModelRequest) Reset() {
	*x = DeleteSDAModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSDAModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSDAModelRequest) ProtoMessage() {}

func (x *DeleteSDAModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSDAModelRequest.ProtoReflect.Descriptor instead.
func (*DeleteSDAModelRequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{1}
}

func (x *DeleteSDAModelRequest) GetSdamodelId() int32 {
	if x != nil {
		return x.SdamodelId
	}
	return 0
}

func (x *DeleteSDAModelRequest) GetReferer() *Referer {
	if x != nil {
		return x.Referer
	}
	return nil
}

type CreateSDARequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelId int32 `protobuf:"varint,1,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// Deprecated: Do not use.
	Reserved    bool     `protobuf:"varint,2,opt,name=reserved,proto3" json:"reserved,omitempty"`
	Token       *Token   `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	NumDevices  int32    `protobuf:"varint,4,opt,name=num_devices,json=numDevices,proto3" json:"num_devices,omitempty"`
	Description string   `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Referer     *Referer `protobuf:"bytes,6,opt,name=referer,proto3" json:"referer,omitempty"`
	GroupId     int32    `protobuf:"varint,7,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *CreateSDARequest) Reset() {
	*x = CreateSDARequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSDARequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSDARequest) ProtoMessage() {}

func (x *CreateSDARequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSDARequest.ProtoReflect.Descriptor instead.
func (*CreateSDARequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{2}
}

func (x *CreateSDARequest) GetModelId() int32 {
	if x != nil {
		return x.ModelId
	}
	return 0
}

// Deprecated: Do not use.
func (x *CreateSDARequest) GetReserved() bool {
	if x != nil {
		return x.Reserved
	}
	return false
}

func (x *CreateSDARequest) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *CreateSDARequest) GetNumDevices() int32 {
	if x != nil {
		return x.NumDevices
	}
	return 0
}

func (x *CreateSDARequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateSDARequest) GetReferer() *Referer {
	if x != nil {
		return x.Referer
	}
	return nil
}

func (x *CreateSDARequest) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type UpdateSDARequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token   *Token   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	ModelId int32    `protobuf:"varint,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	Referer *Referer `protobuf:"bytes,3,opt,name=referer,proto3" json:"referer,omitempty"`
	GroupId int32    `protobuf:"varint,4,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	SdaId   int32    `protobuf:"varint,5,opt,name=sda_id,json=sdaId,proto3" json:"sda_id,omitempty"`
}

func (x *UpdateSDARequest) Reset() {
	*x = UpdateSDARequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSDARequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSDARequest) ProtoMessage() {}

func (x *UpdateSDARequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSDARequest.ProtoReflect.Descriptor instead.
func (*UpdateSDARequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateSDARequest) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *UpdateSDARequest) GetModelId() int32 {
	if x != nil {
		return x.ModelId
	}
	return 0
}

func (x *UpdateSDARequest) GetReferer() *Referer {
	if x != nil {
		return x.Referer
	}
	return nil
}

func (x *UpdateSDARequest) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *UpdateSDARequest) GetSdaId() int32 {
	if x != nil {
		return x.SdaId
	}
	return 0
}

type DeleteSDARequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token   *Token   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Referer *Referer `protobuf:"bytes,2,opt,name=referer,proto3" json:"referer,omitempty"`
	SdaId   int32    `protobuf:"varint,3,opt,name=sda_id,json=sdaId,proto3" json:"sda_id,omitempty"`
	Admin   bool     `protobuf:"varint,4,opt,name=admin,proto3" json:"admin,omitempty"`
}

func (x *DeleteSDARequest) Reset() {
	*x = DeleteSDARequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSDARequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSDARequest) ProtoMessage() {}

func (x *DeleteSDARequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSDARequest.ProtoReflect.Descriptor instead.
func (*DeleteSDARequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteSDARequest) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *DeleteSDARequest) GetReferer() *Referer {
	if x != nil {
		return x.Referer
	}
	return nil
}

func (x *DeleteSDARequest) GetSdaId() int32 {
	if x != nil {
		return x.SdaId
	}
	return 0
}

func (x *DeleteSDARequest) GetAdmin() bool {
	if x != nil {
		return x.Admin
	}
	return false
}

type CreateSDAModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     ResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=moreh.sdamanager.ResponseCode" json:"code,omitempty"`
	Sdamodel *SDAModel    `protobuf:"bytes,2,opt,name=sdamodel,proto3" json:"sdamodel,omitempty"`
}

func (x *CreateSDAModelResponse) Reset() {
	*x = CreateSDAModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSDAModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSDAModelResponse) ProtoMessage() {}

func (x *CreateSDAModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSDAModelResponse.ProtoReflect.Descriptor instead.
func (*CreateSDAModelResponse) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{5}
}

func (x *CreateSDAModelResponse) GetCode() ResponseCode {
	if x != nil {
		return x.Code
	}
	return ResponseCode_NONE
}

func (x *CreateSDAModelResponse) GetSdamodel() *SDAModel {
	if x != nil {
		return x.Sdamodel
	}
	return nil
}

type CreateSDAResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code ResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=moreh.sdamanager.ResponseCode" json:"code,omitempty"`
	Sda  *SDA         `protobuf:"bytes,2,opt,name=sda,proto3" json:"sda,omitempty"`
}

func (x *CreateSDAResponse) Reset() {
	*x = CreateSDAResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSDAResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSDAResponse) ProtoMessage() {}

func (x *CreateSDAResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSDAResponse.ProtoReflect.Descriptor instead.
func (*CreateSDAResponse) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{6}
}

func (x *CreateSDAResponse) GetCode() ResponseCode {
	if x != nil {
		return x.Code
	}
	return ResponseCode_NONE
}

func (x *CreateSDAResponse) GetSda() *SDA {
	if x != nil {
		return x.Sda
	}
	return nil
}

type UpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code ResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=moreh.sdamanager.ResponseCode" json:"code,omitempty"`
}

func (x *UpdateResponse) Reset() {
	*x = UpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponse) ProtoMessage() {}

func (x *UpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponse.ProtoReflect.Descriptor instead.
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateResponse) GetCode() ResponseCode {
	if x != nil {
		return x.Code
	}
	return ResponseCode_NONE
}

type DeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code ResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=moreh.sdamanager.ResponseCode" json:"code,omitempty"`
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteResponse) GetCode() ResponseCode {
	if x != nil {
		return x.Code
	}
	return ResponseCode_NONE
}

type CreateTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *Token `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CreateTokenRequest) Reset() {
	*x = CreateTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTokenRequest) ProtoMessage() {}

func (x *CreateTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTokenRequest.ProtoReflect.Descriptor instead.
func (*CreateTokenRequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{9}
}

func (x *CreateTokenRequest) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

type CreateTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  ResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=moreh.sdamanager.ResponseCode" json:"code,omitempty"`
	Token *Token       `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CreateTokenResponse) Reset() {
	*x = CreateTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTokenResponse) ProtoMessage() {}

func (x *CreateTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTokenResponse.ProtoReflect.Descriptor instead.
func (*CreateTokenResponse) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{10}
}

func (x *CreateTokenResponse) GetCode() ResponseCode {
	if x != nil {
		return x.Code
	}
	return ResponseCode_NONE
}

func (x *CreateTokenResponse) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

type UpdateTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *Token `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UpdateTokenRequest) Reset() {
	*x = UpdateTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTokenRequest) ProtoMessage() {}

func (x *UpdateTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTokenRequest.ProtoReflect.Descriptor instead.
func (*UpdateTokenRequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateTokenRequest) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

type DeleteTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *Token `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *DeleteTokenRequest) Reset() {
	*x = DeleteTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTokenRequest) ProtoMessage() {}

func (x *DeleteTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTokenRequest.ProtoReflect.Descriptor instead.
func (*DeleteTokenRequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteTokenRequest) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

type JobPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority    int32  `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
	RequestTime string `protobuf:"bytes,2,opt,name=request_time,json=requestTime,proto3" json:"request_time,omitempty"`
}

func (x *JobPosition) Reset() {
	*x = JobPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobPosition) ProtoMessage() {}

func (x *JobPosition) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobPosition.ProtoReflect.Descriptor instead.
func (*JobPosition) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{13}
}

func (x *JobPosition) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *JobPosition) GetRequestTime() string {
	if x != nil {
		return x.RequestTime
	}
	return ""
}

type UpdateJobPriorityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // frontend id
	Priority    *Priority    `protobuf:"bytes,2,opt,name=priority,proto3" json:"priority,omitempty"`
	RefPosition *JobPosition `protobuf:"bytes,3,opt,name=ref_position,json=refPosition,proto3" json:"ref_position,omitempty"`
}

func (x *UpdateJobPriorityRequest) Reset() {
	*x = UpdateJobPriorityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateJobPriorityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJobPriorityRequest) ProtoMessage() {}

func (x *UpdateJobPriorityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateJobPriorityRequest.ProtoReflect.Descriptor instead.
func (*UpdateJobPriorityRequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateJobPriorityRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateJobPriorityRequest) GetPriority() *Priority {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *UpdateJobPriorityRequest) GetRefPosition() *JobPosition {
	if x != nil {
		return x.RefPosition
	}
	return nil
}

type ListSDAUtilizationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *Token `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// Deprecated: Do not use.
	Adhoc bool `protobuf:"varint,2,opt,name=adhoc,proto3" json:"adhoc,omitempty"`
}

func (x *ListSDAUtilizationsRequest) Reset() {
	*x = ListSDAUtilizationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSDAUtilizationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSDAUtilizationsRequest) ProtoMessage() {}

func (x *ListSDAUtilizationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSDAUtilizationsRequest.ProtoReflect.Descriptor instead.
func (*ListSDAUtilizationsRequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{15}
}

func (x *ListSDAUtilizationsRequest) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

// Deprecated: Do not use.
func (x *ListSDAUtilizationsRequest) GetAdhoc() bool {
	if x != nil {
		return x.Adhoc
	}
	return false
}

type GetSDAUtilizationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *Token `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// Deprecated: Do not use.
	Adhoc bool `protobuf:"varint,2,opt,name=adhoc,proto3" json:"adhoc,omitempty"`
}

func (x *GetSDAUtilizationsRequest) Reset() {
	*x = GetSDAUtilizationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSDAUtilizationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSDAUtilizationsRequest) ProtoMessage() {}

func (x *GetSDAUtilizationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSDAUtilizationsRequest.ProtoReflect.Descriptor instead.
func (*GetSDAUtilizationsRequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{16}
}

func (x *GetSDAUtilizationsRequest) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

// Deprecated: Do not use.
func (x *GetSDAUtilizationsRequest) GetAdhoc() bool {
	if x != nil {
		return x.Adhoc
	}
	return false
}

type ListSDAUtilizationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Pid         int32             `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	Ptype       string            `protobuf:"bytes,3,opt,name=ptype,proto3" json:"ptype,omitempty"`
	ProcessName string            `protobuf:"bytes,4,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	Sdautils    []*SDAUtilization `protobuf:"bytes,5,rep,name=sdautils,proto3" json:"sdautils,omitempty"`
	Code        ResponseCode      `protobuf:"varint,6,opt,name=code,proto3,enum=moreh.sdamanager.ResponseCode" json:"code,omitempty"`
}

func (x *ListSDAUtilizationsResponse) Reset() {
	*x = ListSDAUtilizationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSDAUtilizationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSDAUtilizationsResponse) ProtoMessage() {}

func (x *ListSDAUtilizationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSDAUtilizationsResponse.ProtoReflect.Descriptor instead.
func (*ListSDAUtilizationsResponse) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{17}
}

func (x *ListSDAUtilizationsResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListSDAUtilizationsResponse) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ListSDAUtilizationsResponse) GetPtype() string {
	if x != nil {
		return x.Ptype
	}
	return ""
}

func (x *ListSDAUtilizationsResponse) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *ListSDAUtilizationsResponse) GetSdautils() []*SDAUtilization {
	if x != nil {
		return x.Sdautils
	}
	return nil
}

func (x *ListSDAUtilizationsResponse) GetCode() ResponseCode {
	if x != nil {
		return x.Code
	}
	return ResponseCode_NONE
}

type GetSDAUtilizationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sdautils []*SDAUtilization `protobuf:"bytes,1,rep,name=sdautils,proto3" json:"sdautils,omitempty"`
	Code     ResponseCode      `protobuf:"varint,2,opt,name=code,proto3,enum=moreh.sdamanager.ResponseCode" json:"code,omitempty"`
}

func (x *GetSDAUtilizationsResponse) Reset() {
	*x = GetSDAUtilizationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSDAUtilizationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSDAUtilizationsResponse) ProtoMessage() {}

func (x *GetSDAUtilizationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSDAUtilizationsResponse.ProtoReflect.Descriptor instead.
func (*GetSDAUtilizationsResponse) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{18}
}

func (x *GetSDAUtilizationsResponse) GetSdautils() []*SDAUtilization {
	if x != nil {
		return x.Sdautils
	}
	return nil
}

func (x *GetSDAUtilizationsResponse) GetCode() ResponseCode {
	if x != nil {
		return x.Code
	}
	return ResponseCode_NONE
}

type SDAUtilization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalMemory int64       `protobuf:"varint,1,opt,name=total_memory,json=totalMemory,proto3" json:"total_memory,omitempty"`
	UsedMemory  int64       `protobuf:"varint,2,opt,name=used_memory,json=usedMemory,proto3" json:"used_memory,omitempty"`
	Temperature int64       `protobuf:"varint,3,opt,name=temperature,proto3" json:"temperature,omitempty"`
	GpuPower    int32       `protobuf:"varint,4,opt,name=gpu_power,json=gpuPower,proto3" json:"gpu_power,omitempty"`
	Sda         *SDA        `protobuf:"bytes,5,opt,name=sda,proto3" json:"sda,omitempty"`
	FrontendId  *FrontendID `protobuf:"bytes,6,opt,name=frontend_id,json=frontendId,proto3" json:"frontend_id,omitempty"`
	Pid         int32       `protobuf:"varint,7,opt,name=pid,proto3" json:"pid,omitempty"`
	Ptype       string      `protobuf:"bytes,8,opt,name=ptype,proto3" json:"ptype,omitempty"`
	ProcessName string      `protobuf:"bytes,9,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
}

func (x *SDAUtilization) Reset() {
	*x = SDAUtilization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDAUtilization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDAUtilization) ProtoMessage() {}

func (x *SDAUtilization) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDAUtilization.ProtoReflect.Descriptor instead.
func (*SDAUtilization) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{19}
}

func (x *SDAUtilization) GetTotalMemory() int64 {
	if x != nil {
		return x.TotalMemory
	}
	return 0
}

func (x *SDAUtilization) GetUsedMemory() int64 {
	if x != nil {
		return x.UsedMemory
	}
	return 0
}

func (x *SDAUtilization) GetTemperature() int64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *SDAUtilization) GetGpuPower() int32 {
	if x != nil {
		return x.GpuPower
	}
	return 0
}

func (x *SDAUtilization) GetSda() *SDA {
	if x != nil {
		return x.Sda
	}
	return nil
}

func (x *SDAUtilization) GetFrontendId() *FrontendID {
	if x != nil {
		return x.FrontendId
	}
	return nil
}

func (x *SDAUtilization) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *SDAUtilization) GetPtype() string {
	if x != nil {
		return x.Ptype
	}
	return ""
}

func (x *SDAUtilization) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

type SDAModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NumDevices  int32  `protobuf:"varint,3,opt,name=num_devices,json=numDevices,proto3" json:"num_devices,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	GroupId     int32  `protobuf:"varint,5,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	GroupName   string `protobuf:"bytes,6,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
}

func (x *SDAModel) Reset() {
	*x = SDAModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDAModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDAModel) ProtoMessage() {}

func (x *SDAModel) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDAModel.ProtoReflect.Descriptor instead.
func (*SDAModel) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{20}
}

func (x *SDAModel) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SDAModel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SDAModel) GetNumDevices() int32 {
	if x != nil {
		return x.NumDevices
	}
	return 0
}

func (x *SDAModel) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SDAModel) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *SDAModel) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

type SDA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ModelId int32  `protobuf:"varint,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	Token   *Token `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	// Deprecated: Do not use.
	Reserved       bool       `protobuf:"varint,4,opt,name=reserved,proto3" json:"reserved,omitempty"`
	NumDevices     int32      `protobuf:"varint,5,opt,name=num_devices,json=numDevices,proto3" json:"num_devices,omitempty"`
	Backendlist    []*Backend `protobuf:"bytes,6,rep,name=backendlist,proto3" json:"backendlist,omitempty"`
	Description    string     `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	SdamodelName   string     `protobuf:"bytes,8,opt,name=sdamodel_name,json=sdamodelName,proto3" json:"sdamodel_name,omitempty"`
	ModelGroupName string     `protobuf:"bytes,9,opt,name=model_group_name,json=modelGroupName,proto3" json:"model_group_name,omitempty"`
}

func (x *SDA) Reset() {
	*x = SDA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDA) ProtoMessage() {}

func (x *SDA) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDA.ProtoReflect.Descriptor instead.
func (*SDA) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{21}
}

func (x *SDA) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SDA) GetModelId() int32 {
	if x != nil {
		return x.ModelId
	}
	return 0
}

func (x *SDA) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

// Deprecated: Do not use.
func (x *SDA) GetReserved() bool {
	if x != nil {
		return x.Reserved
	}
	return false
}

func (x *SDA) GetNumDevices() int32 {
	if x != nil {
		return x.NumDevices
	}
	return 0
}

func (x *SDA) GetBackendlist() []*Backend {
	if x != nil {
		return x.Backendlist
	}
	return nil
}

func (x *SDA) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SDA) GetSdamodelName() string {
	if x != nil {
		return x.SdamodelName
	}
	return ""
}

func (x *SDA) GetModelGroupName() string {
	if x != nil {
		return x.ModelGroupName
	}
	return ""
}

type Backend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type        string    `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Ip          string    `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Port        string    `protobuf:"bytes,4,opt,name=port,proto3" json:"port,omitempty"`
	Devicelist  []*Device `protobuf:"bytes,5,rep,name=devicelist,proto3" json:"devicelist,omitempty"`
	Name        string    `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Status      string    `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Group       *Group    `protobuf:"bytes,8,opt,name=group,proto3" json:"group,omitempty"`
	Ipmi        *IPMI     `protobuf:"bytes,9,opt,name=ipmi,proto3" json:"ipmi,omitempty"`
	Description string    `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Backend) Reset() {
	*x = Backend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backend) ProtoMessage() {}

func (x *Backend) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backend.ProtoReflect.Descriptor instead.
func (*Backend) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{22}
}

func (x *Backend) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Backend) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Backend) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Backend) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *Backend) GetDevicelist() []*Device {
	if x != nil {
		return x.Devicelist
	}
	return nil
}

func (x *Backend) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Backend) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Backend) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *Backend) GetIpmi() *IPMI {
	if x != nil {
		return x.Ipmi
	}
	return nil
}

func (x *Backend) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BackendId int64   `protobuf:"varint,3,opt,name=backend_id,json=backendId,proto3" json:"backend_id,omitempty"`
	Status    string  `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Available bool    `protobuf:"varint,5,opt,name=available,proto3" json:"available,omitempty"`
	GpuTemp   int64   `protobuf:"varint,6,opt,name=gpu_temp,json=gpuTemp,proto3" json:"gpu_temp,omitempty"`
	GpuUtil   int64   `protobuf:"varint,7,opt,name=gpu_util,json=gpuUtil,proto3" json:"gpu_util,omitempty"`
	MemTemp   int64   `protobuf:"varint,8,opt,name=mem_temp,json=memTemp,proto3" json:"mem_temp,omitempty"`
	MemUtil   int64   `protobuf:"varint,9,opt,name=mem_util,json=memUtil,proto3" json:"mem_util,omitempty"`
	MemUsage  float32 `protobuf:"fixed32,10,opt,name=mem_usage,json=memUsage,proto3" json:"mem_usage,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{23}
}

func (x *Device) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Device) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Device) GetBackendId() int64 {
	if x != nil {
		return x.BackendId
	}
	return 0
}

func (x *Device) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Device) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *Device) GetGpuTemp() int64 {
	if x != nil {
		return x.GpuTemp
	}
	return 0
}

func (x *Device) GetGpuUtil() int64 {
	if x != nil {
		return x.GpuUtil
	}
	return 0
}

func (x *Device) GetMemTemp() int64 {
	if x != nil {
		return x.MemTemp
	}
	return 0
}

func (x *Device) GetMemUtil() int64 {
	if x != nil {
		return x.MemUtil
	}
	return 0
}

func (x *Device) GetMemUsage() float32 {
	if x != nil {
		return x.MemUsage
	}
	return 0
}

type SDAModelList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modellist []*SDAModel `protobuf:"bytes,1,rep,name=modellist,proto3" json:"modellist,omitempty"`
}

func (x *SDAModelList) Reset() {
	*x = SDAModelList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDAModelList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDAModelList) ProtoMessage() {}

func (x *SDAModelList) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDAModelList.ProtoReflect.Descriptor instead.
func (*SDAModelList) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{24}
}

func (x *SDAModelList) GetModellist() []*SDAModel {
	if x != nil {
		return x.Modellist
	}
	return nil
}

type SDAList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sdalist []*SDA `protobuf:"bytes,1,rep,name=sdalist,proto3" json:"sdalist,omitempty"`
}

func (x *SDAList) Reset() {
	*x = SDAList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDAList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDAList) ProtoMessage() {}

func (x *SDAList) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDAList.ProtoReflect.Descriptor instead.
func (*SDAList) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{25}
}

func (x *SDAList) GetSdalist() []*SDA {
	if x != nil {
		return x.Sdalist
	}
	return nil
}

type BackendListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orderby BackendListRequest_OrderBy `protobuf:"varint,1,opt,name=orderby,proto3,enum=moreh.sdamanager.BackendListRequest_OrderBy" json:"orderby,omitempty"`
}

func (x *BackendListRequest) Reset() {
	*x = BackendListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackendListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackendListRequest) ProtoMessage() {}

func (x *BackendListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackendListRequest.ProtoReflect.Descriptor instead.
func (*BackendListRequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{26}
}

func (x *BackendListRequest) GetOrderby() BackendListRequest_OrderBy {
	if x != nil {
		return x.Orderby
	}
	return BackendListRequest_ID
}

type BackendList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backendlist []*Backend `protobuf:"bytes,1,rep,name=backendlist,proto3" json:"backendlist,omitempty"`
}

func (x *BackendList) Reset() {
	*x = BackendList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackendList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackendList) ProtoMessage() {}

func (x *BackendList) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackendList.ProtoReflect.Descriptor instead.
func (*BackendList) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{27}
}

func (x *BackendList) GetBackendlist() []*Backend {
	if x != nil {
		return x.Backendlist
	}
	return nil
}

type JobInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // frontend_id
	Token            *Token   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Priority         int32    `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	Status           string   `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	ClientPid        int32    `protobuf:"varint,5,opt,name=client_pid,json=clientPid,proto3" json:"client_pid,omitempty"`
	ProcessName      string   `protobuf:"bytes,6,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	RequestTime      string   `protobuf:"bytes,7,opt,name=request_time,json=requestTime,proto3" json:"request_time,omitempty"`
	StartTime        string   `protobuf:"bytes,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime          string   `protobuf:"bytes,9,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	DeviceCount      int32    `protobuf:"varint,10,opt,name=device_count,json=deviceCount,proto3" json:"device_count,omitempty"`
	DeviceInfo       string   `protobuf:"bytes,11,opt,name=device_info,json=deviceInfo,proto3" json:"device_info,omitempty"`
	Referer          *Referer `protobuf:"bytes,12,opt,name=referer,proto3" json:"referer,omitempty"`
	Version          string   `protobuf:"bytes,13,opt,name=version,proto3" json:"version,omitempty"`
	BackendGroupName string   `protobuf:"bytes,14,opt,name=backend_group_name,json=backendGroupName,proto3" json:"backend_group_name,omitempty"`
	SdaId            int32    `protobuf:"varint,15,opt,name=sda_id,json=sdaId,proto3" json:"sda_id,omitempty"`
	ClientInfo       string   `protobuf:"bytes,16,opt,name=client_info,json=clientInfo,proto3" json:"client_info,omitempty"`
}

func (x *JobInfo) Reset() {
	*x = JobInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobInfo) ProtoMessage() {}

func (x *JobInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobInfo.ProtoReflect.Descriptor instead.
func (*JobInfo) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{28}
}

func (x *JobInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *JobInfo) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *JobInfo) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *JobInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *JobInfo) GetClientPid() int32 {
	if x != nil {
		return x.ClientPid
	}
	return 0
}

func (x *JobInfo) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *JobInfo) GetRequestTime() string {
	if x != nil {
		return x.RequestTime
	}
	return ""
}

func (x *JobInfo) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *JobInfo) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *JobInfo) GetDeviceCount() int32 {
	if x != nil {
		return x.DeviceCount
	}
	return 0
}

func (x *JobInfo) GetDeviceInfo() string {
	if x != nil {
		return x.DeviceInfo
	}
	return ""
}

func (x *JobInfo) GetReferer() *Referer {
	if x != nil {
		return x.Referer
	}
	return nil
}

func (x *JobInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *JobInfo) GetBackendGroupName() string {
	if x != nil {
		return x.BackendGroupName
	}
	return ""
}

func (x *JobInfo) GetSdaId() int32 {
	if x != nil {
		return x.SdaId
	}
	return 0
}

func (x *JobInfo) GetClientInfo() string {
	if x != nil {
		return x.ClientInfo
	}
	return ""
}

type JobQueueList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job []*JobInfo `protobuf:"bytes,1,rep,name=job,proto3" json:"job,omitempty"`
}

func (x *JobQueueList) Reset() {
	*x = JobQueueList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobQueueList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobQueueList) ProtoMessage() {}

func (x *JobQueueList) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobQueueList.ProtoReflect.Descriptor instead.
func (*JobQueueList) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{29}
}

func (x *JobQueueList) GetJob() []*JobInfo {
	if x != nil {
		return x.Job
	}
	return nil
}

type JobHistoryList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job        []*JobInfo   `protobuf:"bytes,1,rep,name=job,proto3" json:"job,omitempty"`
	TotalCount int32        `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Code       ResponseCode `protobuf:"varint,3,opt,name=code,proto3,enum=moreh.sdamanager.ResponseCode" json:"code,omitempty"`
}

func (x *JobHistoryList) Reset() {
	*x = JobHistoryList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobHistoryList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobHistoryList) ProtoMessage() {}

func (x *JobHistoryList) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobHistoryList.ProtoReflect.Descriptor instead.
func (*JobHistoryList) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{30}
}

func (x *JobHistoryList) GetJob() []*JobInfo {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *JobHistoryList) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *JobHistoryList) GetCode() ResponseCode {
	if x != nil {
		return x.Code
	}
	return ResponseCode_NONE
}

type JobHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StarttimeFrom string      `protobuf:"bytes,1,opt,name=starttime_from,json=starttimeFrom,proto3" json:"starttime_from,omitempty"`
	StarttimeTo   string      `protobuf:"bytes,2,opt,name=starttime_to,json=starttimeTo,proto3" json:"starttime_to,omitempty"`
	EndtimeFrom   string      `protobuf:"bytes,3,opt,name=endtime_from,json=endtimeFrom,proto3" json:"endtime_from,omitempty"`
	EndtimeTo     string      `protobuf:"bytes,4,opt,name=endtime_to,json=endtimeTo,proto3" json:"endtime_to,omitempty"`
	Status        string      `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Search        string      `protobuf:"bytes,6,opt,name=search,proto3" json:"search,omitempty"`
	Limit         int32       `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int32       `protobuf:"varint,8,opt,name=offset,proto3" json:"offset,omitempty"`
	FeId          *FrontendID `protobuf:"bytes,9,opt,name=fe_id,json=feId,proto3" json:"fe_id,omitempty"`
}

func (x *JobHistoryRequest) Reset() {
	*x = JobHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobHistoryRequest) ProtoMessage() {}

func (x *JobHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobHistoryRequest.ProtoReflect.Descriptor instead.
func (*JobHistoryRequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{31}
}

func (x *JobHistoryRequest) GetStarttimeFrom() string {
	if x != nil {
		return x.StarttimeFrom
	}
	return ""
}

func (x *JobHistoryRequest) GetStarttimeTo() string {
	if x != nil {
		return x.StarttimeTo
	}
	return ""
}

func (x *JobHistoryRequest) GetEndtimeFrom() string {
	if x != nil {
		return x.EndtimeFrom
	}
	return ""
}

func (x *JobHistoryRequest) GetEndtimeTo() string {
	if x != nil {
		return x.EndtimeTo
	}
	return ""
}

func (x *JobHistoryRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *JobHistoryRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *JobHistoryRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *JobHistoryRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *JobHistoryRequest) GetFeId() *FrontendID {
	if x != nil {
		return x.FeId
	}
	return nil
}

type JobQueueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	FeId   *FrontendID `protobuf:"bytes,2,opt,name=fe_id,json=feId,proto3" json:"fe_id,omitempty"`
}

func (x *JobQueueRequest) Reset() {
	*x = JobQueueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobQueueRequest) ProtoMessage() {}

func (x *JobQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobQueueRequest.ProtoReflect.Descriptor instead.
func (*JobQueueRequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{32}
}

func (x *JobQueueRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *JobQueueRequest) GetFeId() *FrontendID {
	if x != nil {
		return x.FeId
	}
	return nil
}

type EventLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token  *Token      `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Action EventAction `protobuf:"varint,2,opt,name=action,proto3,enum=moreh.sdamanager.EventAction" json:"action,omitempty"`
	Desc   bool        `protobuf:"varint,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Count  int32       `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"` // -1 to get all event log
	Offset int32       `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *EventLogRequest) Reset() {
	*x = EventLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLogRequest) ProtoMessage() {}

func (x *EventLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLogRequest.ProtoReflect.Descriptor instead.
func (*EventLogRequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{33}
}

func (x *EventLogRequest) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *EventLogRequest) GetAction() EventAction {
	if x != nil {
		return x.Action
	}
	return EventAction_NONE_ACTION
}

func (x *EventLogRequest) GetDesc() bool {
	if x != nil {
		return x.Desc
	}
	return false
}

func (x *EventLogRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *EventLogRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     *Token   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Action    string   `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Request   string   `protobuf:"bytes,3,opt,name=request,proto3" json:"request,omitempty"`
	Response  string   `protobuf:"bytes,4,opt,name=response,proto3" json:"response,omitempty"`
	EventTime string   `protobuf:"bytes,5,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	Referer   *Referer `protobuf:"bytes,6,opt,name=referer,proto3" json:"referer,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{34}
}

func (x *Event) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *Event) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *Event) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

func (x *Event) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

func (x *Event) GetEventTime() string {
	if x != nil {
		return x.EventTime
	}
	return ""
}

func (x *Event) GetReferer() *Referer {
	if x != nil {
		return x.Referer
	}
	return nil
}

type EventLogList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event []*Event `protobuf:"bytes,1,rep,name=event,proto3" json:"event,omitempty"`
}

func (x *EventLogList) Reset() {
	*x = EventLogList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLogList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLogList) ProtoMessage() {}

func (x *EventLogList) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLogList.ProtoReflect.Descriptor instead.
func (*EventLogList) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{35}
}

func (x *EventLogList) GetEvent() []*Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type Referer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol Referer_Protocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=moreh.sdamanager.Referer_Protocol" json:"protocol,omitempty"`
	IpAddr   string           `protobuf:"bytes,2,opt,name=ip_addr,json=ipAddr,proto3" json:"ip_addr,omitempty"`
}

func (x *Referer) Reset() {
	*x = Referer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Referer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Referer) ProtoMessage() {}

func (x *Referer) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Referer.ProtoReflect.Descriptor instead.
func (*Referer) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{36}
}

func (x *Referer) GetProtocol() Referer_Protocol {
	if x != nil {
		return x.Protocol
	}
	return Referer_NONE
}

func (x *Referer) GetIpAddr() string {
	if x != nil {
		return x.IpAddr
	}
	return ""
}

type ReleaseDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token   *Token   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Id      int32    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Referer *Referer `protobuf:"bytes,3,opt,name=referer,proto3" json:"referer,omitempty"`
	Admin   bool     `protobuf:"varint,4,opt,name=admin,proto3" json:"admin,omitempty"`
	SdaId   int32    `protobuf:"varint,5,opt,name=sda_id,json=sdaId,proto3" json:"sda_id,omitempty"`
}

func (x *ReleaseDeviceRequest) Reset() {
	*x = ReleaseDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseDeviceRequest) ProtoMessage() {}

func (x *ReleaseDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseDeviceRequest.ProtoReflect.Descriptor instead.
func (*ReleaseDeviceRequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{37}
}

func (x *ReleaseDeviceRequest) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *ReleaseDeviceRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReleaseDeviceRequest) GetReferer() *Referer {
	if x != nil {
		return x.Referer
	}
	return nil
}

func (x *ReleaseDeviceRequest) GetAdmin() bool {
	if x != nil {
		return x.Admin
	}
	return false
}

func (x *ReleaseDeviceRequest) GetSdaId() int32 {
	if x != nil {
		return x.SdaId
	}
	return 0
}

type ReleaseDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code ResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=moreh.sdamanager.ResponseCode" json:"code,omitempty"`
}

func (x *ReleaseDeviceResponse) Reset() {
	*x = ReleaseDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseDeviceResponse) ProtoMessage() {}

func (x *ReleaseDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseDeviceResponse.ProtoReflect.Descriptor instead.
func (*ReleaseDeviceResponse) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{38}
}

func (x *ReleaseDeviceResponse) GetCode() ResponseCode {
	if x != nil {
		return x.Code
	}
	return ResponseCode_NONE
}

type CreateBackendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backend *Backend `protobuf:"bytes,1,opt,name=backend,proto3" json:"backend,omitempty"`
	Referer *Referer `protobuf:"bytes,2,opt,name=referer,proto3" json:"referer,omitempty"`
}

func (x *CreateBackendRequest) Reset() {
	*x = CreateBackendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBackendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBackendRequest) ProtoMessage() {}

func (x *CreateBackendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBackendRequest.ProtoReflect.Descriptor instead.
func (*CreateBackendRequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{39}
}

func (x *CreateBackendRequest) GetBackend() *Backend {
	if x != nil {
		return x.Backend
	}
	return nil
}

func (x *CreateBackendRequest) GetReferer() *Referer {
	if x != nil {
		return x.Referer
	}
	return nil
}

type CreateBackendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    ResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=moreh.sdamanager.ResponseCode" json:"code,omitempty"`
	Backend *Backend     `protobuf:"bytes,2,opt,name=backend,proto3" json:"backend,omitempty"`
}

func (x *CreateBackendResponse) Reset() {
	*x = CreateBackendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBackendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBackendResponse) ProtoMessage() {}

func (x *CreateBackendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBackendResponse.ProtoReflect.Descriptor instead.
func (*CreateBackendResponse) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{40}
}

func (x *CreateBackendResponse) GetCode() ResponseCode {
	if x != nil {
		return x.Code
	}
	return ResponseCode_NONE
}

func (x *CreateBackendResponse) GetBackend() *Backend {
	if x != nil {
		return x.Backend
	}
	return nil
}

type DeleteBackendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackendId int32    `protobuf:"varint,1,opt,name=backend_id,json=backendId,proto3" json:"backend_id,omitempty"`
	Referer   *Referer `protobuf:"bytes,2,opt,name=referer,proto3" json:"referer,omitempty"`
}

func (x *DeleteBackendRequest) Reset() {
	*x = DeleteBackendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBackendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBackendRequest) ProtoMessage() {}

func (x *DeleteBackendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBackendRequest.ProtoReflect.Descriptor instead.
func (*DeleteBackendRequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{41}
}

func (x *DeleteBackendRequest) GetBackendId() int32 {
	if x != nil {
		return x.BackendId
	}
	return 0
}

func (x *DeleteBackendRequest) GetReferer() *Referer {
	if x != nil {
		return x.Referer
	}
	return nil
}

type UpdateBackendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backend *Backend `protobuf:"bytes,1,opt,name=backend,proto3" json:"backend,omitempty"`
	Referer *Referer `protobuf:"bytes,2,opt,name=referer,proto3" json:"referer,omitempty"`
}

func (x *UpdateBackendRequest) Reset() {
	*x = UpdateBackendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBackendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBackendRequest) ProtoMessage() {}

func (x *UpdateBackendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBackendRequest.ProtoReflect.Descriptor instead.
func (*UpdateBackendRequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{42}
}

func (x *UpdateBackendRequest) GetBackend() *Backend {
	if x != nil {
		return x.Backend
	}
	return nil
}

func (x *UpdateBackendRequest) GetReferer() *Referer {
	if x != nil {
		return x.Referer
	}
	return nil
}

type UpdateDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices []*Device `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
	Referer *Referer  `protobuf:"bytes,2,opt,name=referer,proto3" json:"referer,omitempty"`
}

func (x *UpdateDeviceRequest) Reset() {
	*x = UpdateDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceRequest) ProtoMessage() {}

func (x *UpdateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{43}
}

func (x *UpdateDeviceRequest) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *UpdateDeviceRequest) GetReferer() *Referer {
	if x != nil {
		return x.Referer
	}
	return nil
}

type GetSDAInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    ResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=moreh.sdamanager.ResponseCode" json:"code,omitempty"`
	Sdalist *SDAList     `protobuf:"bytes,2,opt,name=sdalist,proto3" json:"sdalist,omitempty"`
}

func (x *GetSDAInfoResponse) Reset() {
	*x = GetSDAInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSDAInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSDAInfoResponse) ProtoMessage() {}

func (x *GetSDAInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSDAInfoResponse.ProtoReflect.Descriptor instead.
func (*GetSDAInfoResponse) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{44}
}

func (x *GetSDAInfoResponse) GetCode() ResponseCode {
	if x != nil {
		return x.Code
	}
	return ResponseCode_NONE
}

func (x *GetSDAInfoResponse) GetSdalist() *SDAList {
	if x != nil {
		return x.Sdalist
	}
	return nil
}

type GetTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  ResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=moreh.sdamanager.ResponseCode" json:"code,omitempty"`
	Token *Token       `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetTokenResponse) Reset() {
	*x = GetTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenResponse) ProtoMessage() {}

func (x *GetTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenResponse.ProtoReflect.Descriptor instead.
func (*GetTokenResponse) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{45}
}

func (x *GetTokenResponse) GetCode() ResponseCode {
	if x != nil {
		return x.Code
	}
	return ResponseCode_NONE
}

func (x *GetTokenResponse) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

type CreateVersionInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionInfo *VersionInfo `protobuf:"bytes,1,opt,name=version_info,json=versionInfo,proto3" json:"version_info,omitempty"`
	Referer     *Referer     `protobuf:"bytes,2,opt,name=referer,proto3" json:"referer,omitempty"`
}

func (x *CreateVersionInfoRequest) Reset() {
	*x = CreateVersionInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVersionInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVersionInfoRequest) ProtoMessage() {}

func (x *CreateVersionInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVersionInfoRequest.ProtoReflect.Descriptor instead.
func (*CreateVersionInfoRequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{46}
}

func (x *CreateVersionInfoRequest) GetVersionInfo() *VersionInfo {
	if x != nil {
		return x.VersionInfo
	}
	return nil
}

func (x *CreateVersionInfoRequest) GetReferer() *Referer {
	if x != nil {
		return x.Referer
	}
	return nil
}

type CreateVersionInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code ResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=moreh.sdamanager.ResponseCode" json:"code,omitempty"`
}

func (x *CreateVersionInfoResponse) Reset() {
	*x = CreateVersionInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVersionInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVersionInfoResponse) ProtoMessage() {}

func (x *CreateVersionInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVersionInfoResponse.ProtoReflect.Descriptor instead.
func (*CreateVersionInfoResponse) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{47}
}

func (x *CreateVersionInfoResponse) GetCode() ResponseCode {
	if x != nil {
		return x.Code
	}
	return ResponseCode_NONE
}

type UpdateVersionInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionInfo *VersionInfo `protobuf:"bytes,1,opt,name=version_info,json=versionInfo,proto3" json:"version_info,omitempty"`
	Referer     *Referer     `protobuf:"bytes,2,opt,name=referer,proto3" json:"referer,omitempty"`
}

func (x *UpdateVersionInfoRequest) Reset() {
	*x = UpdateVersionInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVersionInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVersionInfoRequest) ProtoMessage() {}

func (x *UpdateVersionInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVersionInfoRequest.ProtoReflect.Descriptor instead.
func (*UpdateVersionInfoRequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{48}
}

func (x *UpdateVersionInfoRequest) GetVersionInfo() *VersionInfo {
	if x != nil {
		return x.VersionInfo
	}
	return nil
}

func (x *UpdateVersionInfoRequest) GetReferer() *Referer {
	if x != nil {
		return x.Referer
	}
	return nil
}

type DeleteVersionInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Referer *Referer `protobuf:"bytes,2,opt,name=referer,proto3" json:"referer,omitempty"`
}

func (x *DeleteVersionInfoRequest) Reset() {
	*x = DeleteVersionInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVersionInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVersionInfoRequest) ProtoMessage() {}

func (x *DeleteVersionInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVersionInfoRequest.ProtoReflect.Descriptor instead.
func (*DeleteVersionInfoRequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{49}
}

func (x *DeleteVersionInfoRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DeleteVersionInfoRequest) GetReferer() *Referer {
	if x != nil {
		return x.Referer
	}
	return nil
}

type IPMI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip     string       `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Status *IPMI_Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *IPMI) Reset() {
	*x = IPMI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPMI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPMI) ProtoMessage() {}

func (x *IPMI) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPMI.ProtoReflect.Descriptor instead.
func (*IPMI) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{50}
}

func (x *IPMI) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *IPMI) GetStatus() *IPMI_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetBackendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackendId int32 `protobuf:"varint,1,opt,name=backend_id,json=backendId,proto3" json:"backend_id,omitempty"`
}

func (x *GetBackendRequest) Reset() {
	*x = GetBackendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBackendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBackendRequest) ProtoMessage() {}

func (x *GetBackendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBackendRequest.ProtoReflect.Descriptor instead.
func (*GetBackendRequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{51}
}

func (x *GetBackendRequest) GetBackendId() int32 {
	if x != nil {
		return x.BackendId
	}
	return 0
}

type GetBackendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    ResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=moreh.sdamanager.ResponseCode" json:"code,omitempty"`
	Backend *Backend     `protobuf:"bytes,2,opt,name=backend,proto3" json:"backend,omitempty"`
}

func (x *GetBackendResponse) Reset() {
	*x = GetBackendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBackendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBackendResponse) ProtoMessage() {}

func (x *GetBackendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBackendResponse.ProtoReflect.Descriptor instead.
func (*GetBackendResponse) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{52}
}

func (x *GetBackendResponse) GetCode() ResponseCode {
	if x != nil {
		return x.Code
	}
	return ResponseCode_NONE
}

func (x *GetBackendResponse) GetBackend() *Backend {
	if x != nil {
		return x.Backend
	}
	return nil
}

type DeviceUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Token     *Token                 `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *DeviceUsageRequest) Reset() {
	*x = DeviceUsageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceUsageRequest) ProtoMessage() {}

func (x *DeviceUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceUsageRequest.ProtoReflect.Descriptor instead.
func (*DeviceUsageRequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{53}
}

func (x *DeviceUsageRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *DeviceUsageRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *DeviceUsageRequest) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

type DeviceUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token             *Token  `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Min               int32   `protobuf:"varint,2,opt,name=min,proto3" json:"min,omitempty"`
	Max               int32   `protobuf:"varint,3,opt,name=max,proto3" json:"max,omitempty"`
	Average           float32 `protobuf:"fixed32,4,opt,name=average,proto3" json:"average,omitempty"`
	MinPercentage     float32 `protobuf:"fixed32,5,opt,name=min_percentage,json=minPercentage,proto3" json:"min_percentage,omitempty"`
	MaxPercentage     float32 `protobuf:"fixed32,6,opt,name=max_percentage,json=maxPercentage,proto3" json:"max_percentage,omitempty"`
	AveragePercentage float32 `protobuf:"fixed32,7,opt,name=average_percentage,json=averagePercentage,proto3" json:"average_percentage,omitempty"`
	TotalDevices      int32   `protobuf:"varint,8,opt,name=total_devices,json=totalDevices,proto3" json:"total_devices,omitempty"`
}

func (x *DeviceUsage) Reset() {
	*x = DeviceUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceUsage) ProtoMessage() {}

func (x *DeviceUsage) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceUsage.ProtoReflect.Descriptor instead.
func (*DeviceUsage) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{54}
}

func (x *DeviceUsage) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *DeviceUsage) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *DeviceUsage) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *DeviceUsage) GetAverage() float32 {
	if x != nil {
		return x.Average
	}
	return 0
}

func (x *DeviceUsage) GetMinPercentage() float32 {
	if x != nil {
		return x.MinPercentage
	}
	return 0
}

func (x *DeviceUsage) GetMaxPercentage() float32 {
	if x != nil {
		return x.MaxPercentage
	}
	return 0
}

func (x *DeviceUsage) GetAveragePercentage() float32 {
	if x != nil {
		return x.AveragePercentage
	}
	return 0
}

func (x *DeviceUsage) GetTotalDevices() int32 {
	if x != nil {
		return x.TotalDevices
	}
	return 0
}

type DeviceUsageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       ResponseCode   `protobuf:"varint,1,opt,name=code,proto3,enum=moreh.sdamanager.ResponseCode" json:"code,omitempty"`
	TotalUsage *DeviceUsage   `protobuf:"bytes,2,opt,name=total_usage,json=totalUsage,proto3" json:"total_usage,omitempty"`
	UsageList  []*DeviceUsage `protobuf:"bytes,3,rep,name=usage_list,json=usageList,proto3" json:"usage_list,omitempty"`
}

func (x *DeviceUsageResponse) Reset() {
	*x = DeviceUsageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceUsageResponse) ProtoMessage() {}

func (x *DeviceUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceUsageResponse.ProtoReflect.Descriptor instead.
func (*DeviceUsageResponse) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{55}
}

func (x *DeviceUsageResponse) GetCode() ResponseCode {
	if x != nil {
		return x.Code
	}
	return ResponseCode_NONE
}

func (x *DeviceUsageResponse) GetTotalUsage() *DeviceUsage {
	if x != nil {
		return x.TotalUsage
	}
	return nil
}

func (x *DeviceUsageResponse) GetUsageList() []*DeviceUsage {
	if x != nil {
		return x.UsageList
	}
	return nil
}

type CreateGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group *Group `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *CreateGroupRequest) Reset() {
	*x = CreateGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupRequest) ProtoMessage() {}

func (x *CreateGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateGroupRequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{56}
}

func (x *CreateGroupRequest) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

type CreateGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    ResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=moreh.sdamanager.ResponseCode" json:"code,omitempty"`
	GroupId int32        `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *CreateGroupResponse) Reset() {
	*x = CreateGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupResponse) ProtoMessage() {}

func (x *CreateGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateGroupResponse) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{57}
}

func (x *CreateGroupResponse) GetCode() ResponseCode {
	if x != nil {
		return x.Code
	}
	return ResponseCode_NONE
}

func (x *CreateGroupResponse) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type UpdateGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group *Group `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *UpdateGroupRequest) Reset() {
	*x = UpdateGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupRequest) ProtoMessage() {}

func (x *UpdateGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateGroupRequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{58}
}

func (x *UpdateGroupRequest) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

type DeleteGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupType   GroupType `protobuf:"varint,1,opt,name=group_type,json=groupType,proto3,enum=moreh.sdamanager.GroupType" json:"group_type,omitempty"`
	GroupId     int32     `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	ForceDelete bool      `protobuf:"varint,3,opt,name=force_delete,json=forceDelete,proto3" json:"force_delete,omitempty"`
}

func (x *DeleteGroupRequest) Reset() {
	*x = DeleteGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupRequest) ProtoMessage() {}

func (x *DeleteGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteGroupRequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{59}
}

func (x *DeleteGroupRequest) GetGroupType() GroupType {
	if x != nil {
		return x.GroupType
	}
	return GroupType_BACKEND
}

func (x *DeleteGroupRequest) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *DeleteGroupRequest) GetForceDelete() bool {
	if x != nil {
		return x.ForceDelete
	}
	return false
}

type ListGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupType GroupType `protobuf:"varint,1,opt,name=group_type,json=groupType,proto3,enum=moreh.sdamanager.GroupType" json:"group_type,omitempty"`
	GroupId   int32     `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *ListGroupRequest) Reset() {
	*x = ListGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupRequest) ProtoMessage() {}

func (x *ListGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupRequest.ProtoReflect.Descriptor instead.
func (*ListGroupRequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{60}
}

func (x *ListGroupRequest) GetGroupType() GroupType {
	if x != nil {
		return x.GroupType
	}
	return GroupType_BACKEND
}

func (x *ListGroupRequest) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type ChangeGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupType GroupType `protobuf:"varint,1,opt,name=group_type,json=groupType,proto3,enum=moreh.sdamanager.GroupType" json:"group_type,omitempty"`
	Remove    bool      `protobuf:"varint,2,opt,name=remove,proto3" json:"remove,omitempty"`
	GroupId   int32     `protobuf:"varint,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	ChildId   int32     `protobuf:"varint,4,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty"`
	Token     string    `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ChangeGroupRequest) Reset() {
	*x = ChangeGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeGroupRequest) ProtoMessage() {}

func (x *ChangeGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeGroupRequest.ProtoReflect.Descriptor instead.
func (*ChangeGroupRequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{61}
}

func (x *ChangeGroupRequest) GetGroupType() GroupType {
	if x != nil {
		return x.GroupType
	}
	return GroupType_BACKEND
}

func (x *ChangeGroupRequest) GetRemove() bool {
	if x != nil {
		return x.Remove
	}
	return false
}

func (x *ChangeGroupRequest) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ChangeGroupRequest) GetChildId() int32 {
	if x != nil {
		return x.ChildId
	}
	return 0
}

func (x *ChangeGroupRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ListRelationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId int32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *ListRelationRequest) Reset() {
	*x = ListRelationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRelationRequest) ProtoMessage() {}

func (x *ListRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRelationRequest.ProtoReflect.Descriptor instead.
func (*ListRelationRequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{62}
}

func (x *ListRelationRequest) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type RelationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UgIds          []int32  `protobuf:"varint,1,rep,packed,name=ug_ids,json=ugIds,proto3" json:"ug_ids,omitempty"`
	UserGroups     []string `protobuf:"bytes,2,rep,name=user_groups,json=userGroups,proto3" json:"user_groups,omitempty"`
	MgIds          []int32  `protobuf:"varint,3,rep,packed,name=mg_ids,json=mgIds,proto3" json:"mg_ids,omitempty"`
	SdamodelGroups []string `protobuf:"bytes,4,rep,name=sdamodel_groups,json=sdamodelGroups,proto3" json:"sdamodel_groups,omitempty"`
	BgIds          []int32  `protobuf:"varint,5,rep,packed,name=bg_ids,json=bgIds,proto3" json:"bg_ids,omitempty"`
	BackendGroups  []string `protobuf:"bytes,6,rep,name=backend_groups,json=backendGroups,proto3" json:"backend_groups,omitempty"`
}

func (x *RelationList) Reset() {
	*x = RelationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationList) ProtoMessage() {}

func (x *RelationList) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationList.ProtoReflect.Descriptor instead.
func (*RelationList) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{63}
}

func (x *RelationList) GetUgIds() []int32 {
	if x != nil {
		return x.UgIds
	}
	return nil
}

func (x *RelationList) GetUserGroups() []string {
	if x != nil {
		return x.UserGroups
	}
	return nil
}

func (x *RelationList) GetMgIds() []int32 {
	if x != nil {
		return x.MgIds
	}
	return nil
}

func (x *RelationList) GetSdamodelGroups() []string {
	if x != nil {
		return x.SdamodelGroups
	}
	return nil
}

func (x *RelationList) GetBgIds() []int32 {
	if x != nil {
		return x.BgIds
	}
	return nil
}

func (x *RelationList) GetBackendGroups() []string {
	if x != nil {
		return x.BackendGroups
	}
	return nil
}

type ListServerVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionList []*ServerVersion `protobuf:"bytes,1,rep,name=version_list,json=versionList,proto3" json:"version_list,omitempty"`
}

func (x *ListServerVersion) Reset() {
	*x = ListServerVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServerVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServerVersion) ProtoMessage() {}

func (x *ListServerVersion) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServerVersion.ProtoReflect.Descriptor instead.
func (*ListServerVersion) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{64}
}

func (x *ListServerVersion) GetVersionList() []*ServerVersion {
	if x != nil {
		return x.VersionList
	}
	return nil
}

type ServerVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerName string `protobuf:"bytes,1,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	Version    string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ServerVersion) Reset() {
	*x = ServerVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerVersion) ProtoMessage() {}

func (x *ServerVersion) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerVersion.ProtoReflect.Descriptor instead.
func (*ServerVersion) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{65}
}

func (x *ServerVersion) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *ServerVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type ListTokenUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *Token `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ListTokenUsageRequest) Reset() {
	*x = ListTokenUsageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTokenUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTokenUsageRequest) ProtoMessage() {}

func (x *ListTokenUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTokenUsageRequest.ProtoReflect.Descriptor instead.
func (*ListTokenUsageRequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{66}
}

func (x *ListTokenUsageRequest) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

type ListTokenUsageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenUsage []*TokenUsage `protobuf:"bytes,1,rep,name=token_usage,json=tokenUsage,proto3" json:"token_usage,omitempty"`
}

func (x *ListTokenUsageResponse) Reset() {
	*x = ListTokenUsageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTokenUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTokenUsageResponse) ProtoMessage() {}

func (x *ListTokenUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTokenUsageResponse.ProtoReflect.Descriptor instead.
func (*ListTokenUsageResponse) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{67}
}

func (x *ListTokenUsageResponse) GetTokenUsage() []*TokenUsage {
	if x != nil {
		return x.TokenUsage
	}
	return nil
}

type TokenUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token          *Token     `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	RecentUsageSec int64      `protobuf:"varint,2,opt,name=recent_usage_sec,json=recentUsageSec,proto3" json:"recent_usage_sec,omitempty"`
	TotalUsageSec  int64      `protobuf:"varint,3,opt,name=total_usage_sec,json=totalUsageSec,proto3" json:"total_usage_sec,omitempty"`
	Job            []*JobInfo `protobuf:"bytes,4,rep,name=job,proto3" json:"job,omitempty"`
}

func (x *TokenUsage) Reset() {
	*x = TokenUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenUsage) ProtoMessage() {}

func (x *TokenUsage) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenUsage.ProtoReflect.Descriptor instead.
func (*TokenUsage) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{68}
}

func (x *TokenUsage) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *TokenUsage) GetRecentUsageSec() int64 {
	if x != nil {
		return x.RecentUsageSec
	}
	return 0
}

func (x *TokenUsage) GetTotalUsageSec() int64 {
	if x != nil {
		return x.TotalUsageSec
	}
	return 0
}

func (x *TokenUsage) GetJob() []*JobInfo {
	if x != nil {
		return x.Job
	}
	return nil
}

type ListConfigureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterModule ServerModule `protobuf:"varint,1,opt,name=filter_module,json=filterModule,proto3,enum=moreh.sdamanager.ServerModule" json:"filter_module,omitempty"`
}

func (x *ListConfigureRequest) Reset() {
	*x = ListConfigureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConfigureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigureRequest) ProtoMessage() {}

func (x *ListConfigureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigureRequest.ProtoReflect.Descriptor instead.
func (*ListConfigureRequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{69}
}

func (x *ListConfigureRequest) GetFilterModule() ServerModule {
	if x != nil {
		return x.FilterModule
	}
	return ServerModule_NONE_MODULE
}

type ListConfigureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config []*Configure `protobuf:"bytes,1,rep,name=config,proto3" json:"config,omitempty"`
}

func (x *ListConfigureResponse) Reset() {
	*x = ListConfigureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConfigureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigureResponse) ProtoMessage() {}

func (x *ListConfigureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigureResponse.ProtoReflect.Descriptor instead.
func (*ListConfigureResponse) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{70}
}

func (x *ListConfigureResponse) GetConfig() []*Configure {
	if x != nil {
		return x.Config
	}
	return nil
}

type GetConfigureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module ServerModule `protobuf:"varint,1,opt,name=module,proto3,enum=moreh.sdamanager.ServerModule" json:"module,omitempty"`
	Name   string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetConfigureRequest) Reset() {
	*x = GetConfigureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigureRequest) ProtoMessage() {}

func (x *GetConfigureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigureRequest.ProtoReflect.Descriptor instead.
func (*GetConfigureRequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{71}
}

func (x *GetConfigureRequest) GetModule() ServerModule {
	if x != nil {
		return x.Module
	}
	return ServerModule_NONE_MODULE
}

func (x *GetConfigureRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateConfigureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module ServerModule `protobuf:"varint,1,opt,name=module,proto3,enum=moreh.sdamanager.ServerModule" json:"module,omitempty"`
	Name   string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Value  string       `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UpdateConfigureRequest) Reset() {
	*x = UpdateConfigureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigureRequest) ProtoMessage() {}

func (x *UpdateConfigureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigureRequest.ProtoReflect.Descriptor instead.
func (*UpdateConfigureRequest) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{72}
}

func (x *UpdateConfigureRequest) GetModule() ServerModule {
	if x != nil {
		return x.Module
	}
	return ServerModule_NONE_MODULE
}

func (x *UpdateConfigureRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateConfigureRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type IPMI_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IPMI_Status) Reset() {
	*x = IPMI_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdamanager_api_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPMI_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPMI_Status) ProtoMessage() {}

func (x *IPMI_Status) ProtoReflect() protoreflect.Message {
	mi := &file_sdamanager_api_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPMI_Status.ProtoReflect.Descriptor instead.
func (*IPMI_Status) Descriptor() ([]byte, []int) {
	return file_sdamanager_api_proto_rawDescGZIP(), []int{50, 0}
}

func (x *IPMI_Status) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

var File_sdamanager_api_proto protoreflect.FileDescriptor

var file_sdamanager_api_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x73, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x84, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x44, 0x41,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08,
	0x73, 0x64, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x53, 0x44, 0x41, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x08, 0x73, 0x64, 0x61, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72,
	0x52, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x22, 0x6d, 0x0a, 0x15, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x44, 0x41, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x64, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x64, 0x61, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x52,
	0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x22, 0x8f, 0x02, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x44, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e,
	0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75,
	0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f,
	0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x52, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xc3, 0x01, 0x0a, 0x10, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x44, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x72,
	0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x72, 0x52, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x64, 0x61,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x64, 0x61, 0x49, 0x64,
	0x22, 0xa3, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x44, 0x41, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72,
	0x52, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x64, 0x61,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x64, 0x61, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x44, 0x41, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x64, 0x61, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e,
	0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x44, 0x41, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x08, 0x73, 0x64, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x70, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x44, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x03, 0x73, 0x64, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x44, 0x41, 0x52, 0x03, 0x73, 0x64, 0x61, 0x22,
	0x44, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x44, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x43, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2d, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x78, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x72,
	0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x43, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2d, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x43, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4c, 0x0a, 0x0b, 0x4a, 0x6f, 0x62, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x36, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x4a, 0x6f, 0x62, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65,
	0x66, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x65, 0x0a, 0x1a, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x44, 0x41, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x05, 0x61, 0x64, 0x68, 0x6f, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x61, 0x64, 0x68, 0x6f, 0x63,
	0x22, 0x64, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x44, 0x41, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d,
	0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x05,
	0x61, 0x64, 0x68, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x05, 0x61, 0x64, 0x68, 0x6f, 0x63, 0x22, 0xea, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x44, 0x41, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3c, 0x0a, 0x08, 0x73, 0x64, 0x61, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x44, 0x41, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x64, 0x61, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x12,
	0x32, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x44, 0x41, 0x55, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x73, 0x64, 0x61, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x44, 0x41, 0x55, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x64, 0x61, 0x75, 0x74, 0x69, 0x6c, 0x73,
	0x12, 0x32, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0xc6, 0x02, 0x0a, 0x0e, 0x53, 0x44, 0x41, 0x55, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x75, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x67, 0x70, 0x75, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x67, 0x70, 0x75, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x03, 0x73, 0x64,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e,
	0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x44, 0x41, 0x52, 0x03,
	0x73, 0x64, 0x61, 0x12, 0x3d, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68,
	0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x46, 0x72, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x64, 0x49, 0x44, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x70, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xab, 0x01,
	0x0a, 0x08, 0x53, 0x44, 0x41, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xce, 0x02, 0x0a, 0x03,
	0x53, 0x44, 0x41, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2d,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x3b,
	0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x0b,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x64, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x64, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb4, 0x02, 0x0a,
	0x07, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x38, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x04, 0x69, 0x70, 0x6d, 0x69, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x50, 0x4d, 0x49, 0x52, 0x04, 0x69, 0x70, 0x6d,
	0x69, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x8a, 0x02, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x70, 0x75, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x70, 0x75, 0x54, 0x65,
	0x6d, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x70, 0x75, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x65, 0x6d, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x6d, 0x65, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x5f,
	0x75, 0x74, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x55,
	0x74, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x48, 0x0a, 0x0c, 0x53, 0x44, 0x41, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x44, 0x41, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x3a, 0x0a, 0x07, 0x53, 0x44,
	0x41, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x73, 0x64, 0x61, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x44, 0x41, 0x52, 0x07, 0x73,
	0x64, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x12, 0x42, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c,
	0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x62, 0x79, 0x22, 0x2b, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x12, 0x06, 0x0a, 0x02, 0x49, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0x02, 0x22, 0x4a, 0x0a, 0x0b, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x94,
	0x04, 0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x72, 0x65,
	0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x52, 0x07, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2c, 0x0a, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x73, 0x64, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73,
	0x64, 0x61, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3b, 0x0a, 0x0c, 0x4a, 0x6f, 0x62, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x6a,
	0x6f, 0x62, 0x22, 0x92, 0x01, 0x0a, 0x0e, 0x4a, 0x6f, 0x62, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x6a,
	0x6f, 0x62, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xb0, 0x02, 0x0a, 0x11, 0x4a, 0x6f, 0x62, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65,
	0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e,
	0x64, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x66, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x64, 0x49, 0x44, 0x52, 0x04, 0x66, 0x65, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x0f, 0x4a, 0x6f,
	0x62, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x66, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64,
	0x49, 0x44, 0x52, 0x04, 0x66, 0x65, 0x49, 0x64, 0x22, 0xb9, 0x01, 0x0a, 0x0f, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f,
	0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x6f,
	0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x22, 0xd8, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f,
	0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x52, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x22,
	0x3d, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x8c,
	0x01, 0x0a, 0x07, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6d,
	0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x22, 0x28, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x54, 0x54,
	0x50, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x52, 0x50, 0x43, 0x10, 0x02, 0x22, 0xb7, 0x01,
	0x0a, 0x14, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x72, 0x52, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x12, 0x15, 0x0a, 0x06, 0x73, 0x64, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x64, 0x61, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x15, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x52, 0x07,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x22, 0x80, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x22, 0x6a, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x49,
	0x64, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x52, 0x07, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x22, 0x80, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x33, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x07, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72,
	0x52, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x22, 0x7e, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72,
	0x52, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x22, 0x7d, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x53, 0x44, 0x41, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x73, 0x64, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x44, 0x41, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x07, 0x73, 0x64, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x75, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x72,
	0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x2d, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x91, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0c,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33,
	0x0a, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x52, 0x07, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x72, 0x22, 0x4f, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x40, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e,
	0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x52,
	0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x22, 0x69, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x52, 0x07, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x72, 0x22, 0x6d, 0x0a, 0x04, 0x49, 0x50, 0x4d, 0x49, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x35, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f,
	0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49,
	0x50, 0x4d, 0x49, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x1a, 0x1e, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x32, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x72,
	0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x33, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x07, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9c, 0x02,
	0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d,
	0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x61, 0x78,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69,
	0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0xc7, 0x01, 0x0a,
	0x13, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d,
	0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x09, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f,
	0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x64, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x22, 0x43, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x8e, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x69, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x30, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xc4, 0x01, 0x0a, 0x0c,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x75, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x75, 0x67,
	0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x67, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x64, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x64, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x62, 0x67, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x22, 0x57, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4a, 0x0a, 0x0d, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2d, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x57, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x0a, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63,
	0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x12, 0x2b, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0x5b, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a,
	0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x22, 0x4c, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f,
	0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x61, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e,
	0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x7a, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a,
	0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x06, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a,
	0x83, 0x02, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x44, 0x41, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x44, 0x41, 0x10, 0x02,
	0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x53, 0x44, 0x41, 0x10, 0x03,
	0x12, 0x13, 0x0a, 0x0f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x44, 0x41, 0x4d, 0x4f,
	0x44, 0x45, 0x4c, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f,
	0x53, 0x44, 0x41, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x45, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x12,
	0x0a, 0x0e, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x45, 0x4e, 0x44,
	0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x42, 0x41, 0x43,
	0x4b, 0x45, 0x4e, 0x44, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x12, 0x0a,
	0x0e, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10,
	0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0x0c, 0x32, 0xfc, 0x1f, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x41, 0x50,
	0x49, 0x12, 0x49, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x44, 0x41, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x17, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x1e, 0x2e, 0x6d, 0x6f, 0x72,
	0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x44,
	0x41, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x44, 0x41, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x27,
	0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x44, 0x41, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e,
	0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x44, 0x41, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x44, 0x41,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x27, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x44, 0x41, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x44, 0x41, 0x12,
	0x22, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x44, 0x41, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x44, 0x41,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x53, 0x44, 0x41, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68,
	0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x44, 0x41, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x07, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x44, 0x41, 0x12, 0x17, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e,
	0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x53, 0x44, 0x41, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x44, 0x41, 0x12, 0x22, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e,
	0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x44, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x6f,
	0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x53, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x44, 0x41, 0x12, 0x22, 0x2e, 0x6d,
	0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x44, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x24, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x6f, 0x72, 0x65,
	0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x43, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x17, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68,
	0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x17, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x22, 0x2e, 0x6d,
	0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x57, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x24, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e,
	0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24, 0x2e, 0x6d, 0x6f, 0x72,
	0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x12, 0x24, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x6f, 0x72, 0x65,
	0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x23, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68,
	0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x26, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x10, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x17, 0x2e,
	0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x44, 0x41, 0x55, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x2e, 0x6d, 0x6f, 0x72,
	0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x44, 0x41, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68,
	0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x44, 0x41, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x0a, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x44, 0x41, 0x4a, 0x6f, 0x62, 0x12, 0x2b, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e,
	0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x44,
	0x41, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x44, 0x41, 0x55, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x44, 0x41, 0x55, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x2e, 0x6d, 0x6f, 0x72,
	0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x44, 0x41, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e,
	0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x44,
	0x41, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4a,
	0x6f, 0x62, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x21, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e,
	0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x6f, 0x72,
	0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4a, 0x6f,
	0x62, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x2a, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x59, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x23, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68,
	0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x6d, 0x6f, 0x72,
	0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x00,
	0x12, 0x52, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x23, 0x2e,
	0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4c, 0x6f, 0x67, 0x12, 0x21, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e,
	0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x26, 0x2e, 0x6d, 0x6f, 0x72,
	0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x26,
	0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x26, 0x2e, 0x6d, 0x6f,
	0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x25, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e,
	0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6e, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e,
	0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x63, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e,
	0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x2e, 0x6d,
	0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68,
	0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x19, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x21, 0x2e, 0x6d, 0x6f, 0x72,
	0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12,
	0x5c, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24,
	0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a,
	0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x2e, 0x6d,
	0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64,
	0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x6f,
	0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4e, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x2e, 0x6d,
	0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12,
	0x57, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24,
	0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68,
	0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x00, 0x12, 0x5f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x24, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x6f, 0x72, 0x65,
	0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x65, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0d, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x26, 0x2e, 0x6d, 0x6f, 0x72,
	0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x25, 0x2e,
	0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x28, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73,
	0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x26, 0x5a, 0x24, 0x6d, 0x6f, 0x72, 0x65, 0x68, 0x2e, 0x69, 0x6f,
	0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sdamanager_api_proto_rawDescOnce sync.Once
	file_sdamanager_api_proto_rawDescData = file_sdamanager_api_proto_rawDesc
)

func file_sdamanager_api_proto_rawDescGZIP() []byte {
	file_sdamanager_api_proto_rawDescOnce.Do(func() {
		file_sdamanager_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_sdamanager_api_proto_rawDescData)
	})
	return file_sdamanager_api_proto_rawDescData
}

var file_sdamanager_api_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_sdamanager_api_proto_msgTypes = make([]protoimpl.MessageInfo, 74)
var file_sdamanager_api_proto_goTypes = []interface{}{
	(EventAction)(0),                    // 0: moreh.sdamanager.EventAction
	(BackendListRequest_OrderBy)(0),     // 1: moreh.sdamanager.BackendListRequest.OrderBy
	(Referer_Protocol)(0),               // 2: moreh.sdamanager.Referer.Protocol
	(*CreateSDAModelRequest)(nil),       // 3: moreh.sdamanager.CreateSDAModelRequest
	(*DeleteSDAModelRequest)(nil),       // 4: moreh.sdamanager.DeleteSDAModelRequest
	(*CreateSDARequest)(nil),            // 5: moreh.sdamanager.CreateSDARequest
	(*UpdateSDARequest)(nil),            // 6: moreh.sdamanager.UpdateSDARequest
	(*DeleteSDARequest)(nil),            // 7: moreh.sdamanager.DeleteSDARequest
	(*CreateSDAModelResponse)(nil),      // 8: moreh.sdamanager.CreateSDAModelResponse
	(*CreateSDAResponse)(nil),           // 9: moreh.sdamanager.CreateSDAResponse
	(*UpdateResponse)(nil),              // 10: moreh.sdamanager.UpdateResponse
	(*DeleteResponse)(nil),              // 11: moreh.sdamanager.DeleteResponse
	(*CreateTokenRequest)(nil),          // 12: moreh.sdamanager.CreateTokenRequest
	(*CreateTokenResponse)(nil),         // 13: moreh.sdamanager.CreateTokenResponse
	(*UpdateTokenRequest)(nil),          // 14: moreh.sdamanager.UpdateTokenRequest
	(*DeleteTokenRequest)(nil),          // 15: moreh.sdamanager.DeleteTokenRequest
	(*JobPosition)(nil),                 // 16: moreh.sdamanager.JobPosition
	(*UpdateJobPriorityRequest)(nil),    // 17: moreh.sdamanager.UpdateJobPriorityRequest
	(*ListSDAUtilizationsRequest)(nil),  // 18: moreh.sdamanager.ListSDAUtilizationsRequest
	(*GetSDAUtilizationsRequest)(nil),   // 19: moreh.sdamanager.GetSDAUtilizationsRequest
	(*ListSDAUtilizationsResponse)(nil), // 20: moreh.sdamanager.ListSDAUtilizationsResponse
	(*GetSDAUtilizationsResponse)(nil),  // 21: moreh.sdamanager.GetSDAUtilizationsResponse
	(*SDAUtilization)(nil),              // 22: moreh.sdamanager.SDAUtilization
	(*SDAModel)(nil),                    // 23: moreh.sdamanager.SDAModel
	(*SDA)(nil),                         // 24: moreh.sdamanager.SDA
	(*Backend)(nil),                     // 25: moreh.sdamanager.Backend
	(*Device)(nil),                      // 26: moreh.sdamanager.Device
	(*SDAModelList)(nil),                // 27: moreh.sdamanager.SDAModelList
	(*SDAList)(nil),                     // 28: moreh.sdamanager.SDAList
	(*BackendListRequest)(nil),          // 29: moreh.sdamanager.BackendListRequest
	(*BackendList)(nil),                 // 30: moreh.sdamanager.BackendList
	(*JobInfo)(nil),                     // 31: moreh.sdamanager.JobInfo
	(*JobQueueList)(nil),                // 32: moreh.sdamanager.JobQueueList
	(*JobHistoryList)(nil),              // 33: moreh.sdamanager.JobHistoryList
	(*JobHistoryRequest)(nil),           // 34: moreh.sdamanager.JobHistoryRequest
	(*JobQueueRequest)(nil),             // 35: moreh.sdamanager.JobQueueRequest
	(*EventLogRequest)(nil),             // 36: moreh.sdamanager.EventLogRequest
	(*Event)(nil),                       // 37: moreh.sdamanager.Event
	(*EventLogList)(nil),                // 38: moreh.sdamanager.EventLogList
	(*Referer)(nil),                     // 39: moreh.sdamanager.Referer
	(*ReleaseDeviceRequest)(nil),        // 40: moreh.sdamanager.ReleaseDeviceRequest
	(*ReleaseDeviceResponse)(nil),       // 41: moreh.sdamanager.ReleaseDeviceResponse
	(*CreateBackendRequest)(nil),        // 42: moreh.sdamanager.CreateBackendRequest
	(*CreateBackendResponse)(nil),       // 43: moreh.sdamanager.CreateBackendResponse
	(*DeleteBackendRequest)(nil),        // 44: moreh.sdamanager.DeleteBackendRequest
	(*UpdateBackendRequest)(nil),        // 45: moreh.sdamanager.UpdateBackendRequest
	(*UpdateDeviceRequest)(nil),         // 46: moreh.sdamanager.UpdateDeviceRequest
	(*GetSDAInfoResponse)(nil),          // 47: moreh.sdamanager.GetSDAInfoResponse
	(*GetTokenResponse)(nil),            // 48: moreh.sdamanager.GetTokenResponse
	(*CreateVersionInfoRequest)(nil),    // 49: moreh.sdamanager.CreateVersionInfoRequest
	(*CreateVersionInfoResponse)(nil),   // 50: moreh.sdamanager.CreateVersionInfoResponse
	(*UpdateVersionInfoRequest)(nil),    // 51: moreh.sdamanager.UpdateVersionInfoRequest
	(*DeleteVersionInfoRequest)(nil),    // 52: moreh.sdamanager.DeleteVersionInfoRequest
	(*IPMI)(nil),                        // 53: moreh.sdamanager.IPMI
	(*GetBackendRequest)(nil),           // 54: moreh.sdamanager.GetBackendRequest
	(*GetBackendResponse)(nil),          // 55: moreh.sdamanager.GetBackendResponse
	(*DeviceUsageRequest)(nil),          // 56: moreh.sdamanager.DeviceUsageRequest
	(*DeviceUsage)(nil),                 // 57: moreh.sdamanager.DeviceUsage
	(*DeviceUsageResponse)(nil),         // 58: moreh.sdamanager.DeviceUsageResponse
	(*CreateGroupRequest)(nil),          // 59: moreh.sdamanager.CreateGroupRequest
	(*CreateGroupResponse)(nil),         // 60: moreh.sdamanager.CreateGroupResponse
	(*UpdateGroupRequest)(nil),          // 61: moreh.sdamanager.UpdateGroupRequest
	(*DeleteGroupRequest)(nil),          // 62: moreh.sdamanager.DeleteGroupRequest
	(*ListGroupRequest)(nil),            // 63: moreh.sdamanager.ListGroupRequest
	(*ChangeGroupRequest)(nil),          // 64: moreh.sdamanager.ChangeGroupRequest
	(*ListRelationRequest)(nil),         // 65: moreh.sdamanager.ListRelationRequest
	(*RelationList)(nil),                // 66: moreh.sdamanager.RelationList
	(*ListServerVersion)(nil),           // 67: moreh.sdamanager.ListServerVersion
	(*ServerVersion)(nil),               // 68: moreh.sdamanager.ServerVersion
	(*ListTokenUsageRequest)(nil),       // 69: moreh.sdamanager.ListTokenUsageRequest
	(*ListTokenUsageResponse)(nil),      // 70: moreh.sdamanager.ListTokenUsageResponse
	(*TokenUsage)(nil),                  // 71: moreh.sdamanager.TokenUsage
	(*ListConfigureRequest)(nil),        // 72: moreh.sdamanager.ListConfigureRequest
	(*ListConfigureResponse)(nil),       // 73: moreh.sdamanager.ListConfigureResponse
	(*GetConfigureRequest)(nil),         // 74: moreh.sdamanager.GetConfigureRequest
	(*UpdateConfigureRequest)(nil),      // 75: moreh.sdamanager.UpdateConfigureRequest
	(*IPMI_Status)(nil),                 // 76: moreh.sdamanager.IPMI.Status
	(*Token)(nil),                       // 77: moreh.sdamanager.Token
	(ResponseCode)(0),                   // 78: moreh.sdamanager.ResponseCode
	(*Priority)(nil),                    // 79: moreh.sdamanager.Priority
	(*FrontendID)(nil),                  // 80: moreh.sdamanager.FrontendID
	(*Group)(nil),                       // 81: moreh.sdamanager.Group
	(*VersionInfo)(nil),                 // 82: moreh.sdamanager.VersionInfo
	(*timestamppb.Timestamp)(nil),       // 83: google.protobuf.Timestamp
	(GroupType)(0),                      // 84: moreh.sdamanager.GroupType
	(ServerModule)(0),                   // 85: moreh.sdamanager.ServerModule
	(*Configure)(nil),                   // 86: moreh.sdamanager.Configure
	(*Empty)(nil),                       // 87: moreh.sdamanager.Empty
	(*Version)(nil),                     // 88: moreh.sdamanager.Version
	(*TokenList)(nil),                   // 89: moreh.sdamanager.TokenList
	(*Boolean)(nil),                     // 90: moreh.sdamanager.Boolean
	(*VersionInfoList)(nil),             // 91: moreh.sdamanager.VersionInfoList
	(*GroupList)(nil),                   // 92: moreh.sdamanager.GroupList
}
var file_sdamanager_api_proto_depIdxs = []int32{
	23,  // 0: moreh.sdamanager.CreateSDAModelRequest.sdamodel:type_name -> moreh.sdamanager.SDAModel
	39,  // 1: moreh.sdamanager.CreateSDAModelRequest.referer:type_name -> moreh.sdamanager.Referer
	39,  // 2: moreh.sdamanager.DeleteSDAModelRequest.referer:type_name -> moreh.sdamanager.Referer
	77,  // 3: moreh.sdamanager.CreateSDARequest.token:type_name -> moreh.sdamanager.Token
	39,  // 4: moreh.sdamanager.CreateSDARequest.referer:type_name -> moreh.sdamanager.Referer
	77,  // 5: moreh.sdamanager.UpdateSDARequest.token:type_name -> moreh.sdamanager.Token
	39,  // 6: moreh.sdamanager.UpdateSDARequest.referer:type_name -> moreh.sdamanager.Referer
	77,  // 7: moreh.sdamanager.DeleteSDARequest.token:type_name -> moreh.sdamanager.Token
	39,  // 8: moreh.sdamanager.DeleteSDARequest.referer:type_name -> moreh.sdamanager.Referer
	78,  // 9: moreh.sdamanager.CreateSDAModelResponse.code:type_name -> moreh.sdamanager.ResponseCode
	23,  // 10: moreh.sdamanager.CreateSDAModelResponse.sdamodel:type_name -> moreh.sdamanager.SDAModel
	78,  // 11: moreh.sdamanager.CreateSDAResponse.code:type_name -> moreh.sdamanager.ResponseCode
	24,  // 12: moreh.sdamanager.CreateSDAResponse.sda:type_name -> moreh.sdamanager.SDA
	78,  // 13: moreh.sdamanager.UpdateResponse.code:type_name -> moreh.sdamanager.ResponseCode
	78,  // 14: moreh.sdamanager.DeleteResponse.code:type_name -> moreh.sdamanager.ResponseCode
	77,  // 15: moreh.sdamanager.CreateTokenRequest.token:type_name -> moreh.sdamanager.Token
	78,  // 16: moreh.sdamanager.CreateTokenResponse.code:type_name -> moreh.sdamanager.ResponseCode
	77,  // 17: moreh.sdamanager.CreateTokenResponse.token:type_name -> moreh.sdamanager.Token
	77,  // 18: moreh.sdamanager.UpdateTokenRequest.token:type_name -> moreh.sdamanager.Token
	77,  // 19: moreh.sdamanager.DeleteTokenRequest.token:type_name -> moreh.sdamanager.Token
	79,  // 20: moreh.sdamanager.UpdateJobPriorityRequest.priority:type_name -> moreh.sdamanager.Priority
	16,  // 21: moreh.sdamanager.UpdateJobPriorityRequest.ref_position:type_name -> moreh.sdamanager.JobPosition
	77,  // 22: moreh.sdamanager.ListSDAUtilizationsRequest.token:type_name -> moreh.sdamanager.Token
	77,  // 23: moreh.sdamanager.GetSDAUtilizationsRequest.token:type_name -> moreh.sdamanager.Token
	22,  // 24: moreh.sdamanager.ListSDAUtilizationsResponse.sdautils:type_name -> moreh.sdamanager.SDAUtilization
	78,  // 25: moreh.sdamanager.ListSDAUtilizationsResponse.code:type_name -> moreh.sdamanager.ResponseCode
	22,  // 26: moreh.sdamanager.GetSDAUtilizationsResponse.sdautils:type_name -> moreh.sdamanager.SDAUtilization
	78,  // 27: moreh.sdamanager.GetSDAUtilizationsResponse.code:type_name -> moreh.sdamanager.ResponseCode
	24,  // 28: moreh.sdamanager.SDAUtilization.sda:type_name -> moreh.sdamanager.SDA
	80,  // 29: moreh.sdamanager.SDAUtilization.frontend_id:type_name -> moreh.sdamanager.FrontendID
	77,  // 30: moreh.sdamanager.SDA.token:type_name -> moreh.sdamanager.Token
	25,  // 31: moreh.sdamanager.SDA.backendlist:type_name -> moreh.sdamanager.Backend
	26,  // 32: moreh.sdamanager.Backend.devicelist:type_name -> moreh.sdamanager.Device
	81,  // 33: moreh.sdamanager.Backend.group:type_name -> moreh.sdamanager.Group
	53,  // 34: moreh.sdamanager.Backend.ipmi:type_name -> moreh.sdamanager.IPMI
	23,  // 35: moreh.sdamanager.SDAModelList.modellist:type_name -> moreh.sdamanager.SDAModel
	24,  // 36: moreh.sdamanager.SDAList.sdalist:type_name -> moreh.sdamanager.SDA
	1,   // 37: moreh.sdamanager.BackendListRequest.orderby:type_name -> moreh.sdamanager.BackendListRequest.OrderBy
	25,  // 38: moreh.sdamanager.BackendList.backendlist:type_name -> moreh.sdamanager.Backend
	77,  // 39: moreh.sdamanager.JobInfo.token:type_name -> moreh.sdamanager.Token
	39,  // 40: moreh.sdamanager.JobInfo.referer:type_name -> moreh.sdamanager.Referer
	31,  // 41: moreh.sdamanager.JobQueueList.job:type_name -> moreh.sdamanager.JobInfo
	31,  // 42: moreh.sdamanager.JobHistoryList.job:type_name -> moreh.sdamanager.JobInfo
	78,  // 43: moreh.sdamanager.JobHistoryList.code:type_name -> moreh.sdamanager.ResponseCode
	80,  // 44: moreh.sdamanager.JobHistoryRequest.fe_id:type_name -> moreh.sdamanager.FrontendID
	80,  // 45: moreh.sdamanager.JobQueueRequest.fe_id:type_name -> moreh.sdamanager.FrontendID
	77,  // 46: moreh.sdamanager.EventLogRequest.token:type_name -> moreh.sdamanager.Token
	0,   // 47: moreh.sdamanager.EventLogRequest.action:type_name -> moreh.sdamanager.EventAction
	77,  // 48: moreh.sdamanager.Event.token:type_name -> moreh.sdamanager.Token
	39,  // 49: moreh.sdamanager.Event.referer:type_name -> moreh.sdamanager.Referer
	37,  // 50: moreh.sdamanager.EventLogList.event:type_name -> moreh.sdamanager.Event
	2,   // 51: moreh.sdamanager.Referer.protocol:type_name -> moreh.sdamanager.Referer.Protocol
	77,  // 52: moreh.sdamanager.ReleaseDeviceRequest.token:type_name -> moreh.sdamanager.Token
	39,  // 53: moreh.sdamanager.ReleaseDeviceRequest.referer:type_name -> moreh.sdamanager.Referer
	78,  // 54: moreh.sdamanager.ReleaseDeviceResponse.code:type_name -> moreh.sdamanager.ResponseCode
	25,  // 55: moreh.sdamanager.CreateBackendRequest.backend:type_name -> moreh.sdamanager.Backend
	39,  // 56: moreh.sdamanager.CreateBackendRequest.referer:type_name -> moreh.sdamanager.Referer
	78,  // 57: moreh.sdamanager.CreateBackendResponse.code:type_name -> moreh.sdamanager.ResponseCode
	25,  // 58: moreh.sdamanager.CreateBackendResponse.backend:type_name -> moreh.sdamanager.Backend
	39,  // 59: moreh.sdamanager.DeleteBackendRequest.referer:type_name -> moreh.sdamanager.Referer
	25,  // 60: moreh.sdamanager.UpdateBackendRequest.backend:type_name -> moreh.sdamanager.Backend
	39,  // 61: moreh.sdamanager.UpdateBackendRequest.referer:type_name -> moreh.sdamanager.Referer
	26,  // 62: moreh.sdamanager.UpdateDeviceRequest.devices:type_name -> moreh.sdamanager.Device
	39,  // 63: moreh.sdamanager.UpdateDeviceRequest.referer:type_name -> moreh.sdamanager.Referer
	78,  // 64: moreh.sdamanager.GetSDAInfoResponse.code:type_name -> moreh.sdamanager.ResponseCode
	28,  // 65: moreh.sdamanager.GetSDAInfoResponse.sdalist:type_name -> moreh.sdamanager.SDAList
	78,  // 66: moreh.sdamanager.GetTokenResponse.code:type_name -> moreh.sdamanager.ResponseCode
	77,  // 67: moreh.sdamanager.GetTokenResponse.token:type_name -> moreh.sdamanager.Token
	82,  // 68: moreh.sdamanager.CreateVersionInfoRequest.version_info:type_name -> moreh.sdamanager.VersionInfo
	39,  // 69: moreh.sdamanager.CreateVersionInfoRequest.referer:type_name -> moreh.sdamanager.Referer
	78,  // 70: moreh.sdamanager.CreateVersionInfoResponse.code:type_name -> moreh.sdamanager.ResponseCode
	82,  // 71: moreh.sdamanager.UpdateVersionInfoRequest.version_info:type_name -> moreh.sdamanager.VersionInfo
	39,  // 72: moreh.sdamanager.UpdateVersionInfoRequest.referer:type_name -> moreh.sdamanager.Referer
	39,  // 73: moreh.sdamanager.DeleteVersionInfoRequest.referer:type_name -> moreh.sdamanager.Referer
	76,  // 74: moreh.sdamanager.IPMI.status:type_name -> moreh.sdamanager.IPMI.Status
	78,  // 75: moreh.sdamanager.GetBackendResponse.code:type_name -> moreh.sdamanager.ResponseCode
	25,  // 76: moreh.sdamanager.GetBackendResponse.backend:type_name -> moreh.sdamanager.Backend
	83,  // 77: moreh.sdamanager.DeviceUsageRequest.start_time:type_name -> google.protobuf.Timestamp
	83,  // 78: moreh.sdamanager.DeviceUsageRequest.end_time:type_name -> google.protobuf.Timestamp
	77,  // 79: moreh.sdamanager.DeviceUsageRequest.token:type_name -> moreh.sdamanager.Token
	77,  // 80: moreh.sdamanager.DeviceUsage.token:type_name -> moreh.sdamanager.Token
	78,  // 81: moreh.sdamanager.DeviceUsageResponse.code:type_name -> moreh.sdamanager.ResponseCode
	57,  // 82: moreh.sdamanager.DeviceUsageResponse.total_usage:type_name -> moreh.sdamanager.DeviceUsage
	57,  // 83: moreh.sdamanager.DeviceUsageResponse.usage_list:type_name -> moreh.sdamanager.DeviceUsage
	81,  // 84: moreh.sdamanager.CreateGroupRequest.group:type_name -> moreh.sdamanager.Group
	78,  // 85: moreh.sdamanager.CreateGroupResponse.code:type_name -> moreh.sdamanager.ResponseCode
	81,  // 86: moreh.sdamanager.UpdateGroupRequest.group:type_name -> moreh.sdamanager.Group
	84,  // 87: moreh.sdamanager.DeleteGroupRequest.group_type:type_name -> moreh.sdamanager.GroupType
	84,  // 88: moreh.sdamanager.ListGroupRequest.group_type:type_name -> moreh.sdamanager.GroupType
	84,  // 89: moreh.sdamanager.ChangeGroupRequest.group_type:type_name -> moreh.sdamanager.GroupType
	68,  // 90: moreh.sdamanager.ListServerVersion.version_list:type_name -> moreh.sdamanager.ServerVersion
	77,  // 91: moreh.sdamanager.ListTokenUsageRequest.token:type_name -> moreh.sdamanager.Token
	71,  // 92: moreh.sdamanager.ListTokenUsageResponse.token_usage:type_name -> moreh.sdamanager.TokenUsage
	77,  // 93: moreh.sdamanager.TokenUsage.token:type_name -> moreh.sdamanager.Token
	31,  // 94: moreh.sdamanager.TokenUsage.job:type_name -> moreh.sdamanager.JobInfo
	85,  // 95: moreh.sdamanager.ListConfigureRequest.filter_module:type_name -> moreh.sdamanager.ServerModule
	86,  // 96: moreh.sdamanager.ListConfigureResponse.config:type_name -> moreh.sdamanager.Configure
	85,  // 97: moreh.sdamanager.GetConfigureRequest.module:type_name -> moreh.sdamanager.ServerModule
	85,  // 98: moreh.sdamanager.UpdateConfigureRequest.module:type_name -> moreh.sdamanager.ServerModule
	77,  // 99: moreh.sdamanager.UserAPI.ListSDAModel:input_type -> moreh.sdamanager.Token
	3,   // 100: moreh.sdamanager.UserAPI.CreateSDAModel:input_type -> moreh.sdamanager.CreateSDAModelRequest
	4,   // 101: moreh.sdamanager.UserAPI.DeleteSDAModel:input_type -> moreh.sdamanager.DeleteSDAModelRequest
	5,   // 102: moreh.sdamanager.UserAPI.CreateSDA:input_type -> moreh.sdamanager.CreateSDARequest
	77,  // 103: moreh.sdamanager.UserAPI.GetSDAInfo:input_type -> moreh.sdamanager.Token
	87,  // 104: moreh.sdamanager.UserAPI.ListSDA:input_type -> moreh.sdamanager.Empty
	6,   // 105: moreh.sdamanager.UserAPI.UpdateSDA:input_type -> moreh.sdamanager.UpdateSDARequest
	7,   // 106: moreh.sdamanager.UserAPI.DeleteSDA:input_type -> moreh.sdamanager.DeleteSDARequest
	12,  // 107: moreh.sdamanager.UserAPI.CreateToken:input_type -> moreh.sdamanager.CreateTokenRequest
	87,  // 108: moreh.sdamanager.UserAPI.ListToken:input_type -> moreh.sdamanager.Empty
	77,  // 109: moreh.sdamanager.UserAPI.GetToken:input_type -> moreh.sdamanager.Token
	14,  // 110: moreh.sdamanager.UserAPI.UpdateToken:input_type -> moreh.sdamanager.UpdateTokenRequest
	15,  // 111: moreh.sdamanager.UserAPI.DeleteToken:input_type -> moreh.sdamanager.DeleteTokenRequest
	29,  // 112: moreh.sdamanager.UserAPI.ListBackend:input_type -> moreh.sdamanager.BackendListRequest
	54,  // 113: moreh.sdamanager.UserAPI.GetBackend:input_type -> moreh.sdamanager.GetBackendRequest
	40,  // 114: moreh.sdamanager.UserAPI.ReleaseDevice:input_type -> moreh.sdamanager.ReleaseDeviceRequest
	87,  // 115: moreh.sdamanager.UserAPI.ReleaseAllDevice:input_type -> moreh.sdamanager.Empty
	18,  // 116: moreh.sdamanager.UserAPI.ListSDAUtilizations:input_type -> moreh.sdamanager.ListSDAUtilizationsRequest
	19,  // 117: moreh.sdamanager.UserAPI.ListSDAJob:input_type -> moreh.sdamanager.GetSDAUtilizationsRequest
	19,  // 118: moreh.sdamanager.UserAPI.GetSDAUtilizations:input_type -> moreh.sdamanager.GetSDAUtilizationsRequest
	35,  // 119: moreh.sdamanager.UserAPI.ListJobQueue:input_type -> moreh.sdamanager.JobQueueRequest
	17,  // 120: moreh.sdamanager.UserAPI.UpdateJobPriority:input_type -> moreh.sdamanager.UpdateJobPriorityRequest
	34,  // 121: moreh.sdamanager.UserAPI.ListJobHistory:input_type -> moreh.sdamanager.JobHistoryRequest
	87,  // 122: moreh.sdamanager.UserAPI.GetVersion:input_type -> moreh.sdamanager.Empty
	87,  // 123: moreh.sdamanager.UserAPI.GetServerVersion:input_type -> moreh.sdamanager.Empty
	36,  // 124: moreh.sdamanager.UserAPI.ListEventLog:input_type -> moreh.sdamanager.EventLogRequest
	42,  // 125: moreh.sdamanager.UserAPI.CreateBackend:input_type -> moreh.sdamanager.CreateBackendRequest
	44,  // 126: moreh.sdamanager.UserAPI.DeleteBackend:input_type -> moreh.sdamanager.DeleteBackendRequest
	45,  // 127: moreh.sdamanager.UserAPI.UpdateBackend:input_type -> moreh.sdamanager.UpdateBackendRequest
	46,  // 128: moreh.sdamanager.UserAPI.UpdateDevice:input_type -> moreh.sdamanager.UpdateDeviceRequest
	49,  // 129: moreh.sdamanager.UserAPI.CreateVersionInfo:input_type -> moreh.sdamanager.CreateVersionInfoRequest
	52,  // 130: moreh.sdamanager.UserAPI.DeleteVersionInfo:input_type -> moreh.sdamanager.DeleteVersionInfoRequest
	51,  // 131: moreh.sdamanager.UserAPI.UpdateVersionInfo:input_type -> moreh.sdamanager.UpdateVersionInfoRequest
	88,  // 132: moreh.sdamanager.UserAPI.ListVersionInfo:input_type -> moreh.sdamanager.Version
	59,  // 133: moreh.sdamanager.UserAPI.CreateGroup:input_type -> moreh.sdamanager.CreateGroupRequest
	62,  // 134: moreh.sdamanager.UserAPI.DeleteGroup:input_type -> moreh.sdamanager.DeleteGroupRequest
	61,  // 135: moreh.sdamanager.UserAPI.UpdateGroup:input_type -> moreh.sdamanager.UpdateGroupRequest
	63,  // 136: moreh.sdamanager.UserAPI.ListGroup:input_type -> moreh.sdamanager.ListGroupRequest
	64,  // 137: moreh.sdamanager.UserAPI.ChangeGroup:input_type -> moreh.sdamanager.ChangeGroupRequest
	65,  // 138: moreh.sdamanager.UserAPI.ListRelation:input_type -> moreh.sdamanager.ListRelationRequest
	56,  // 139: moreh.sdamanager.UserAPI.GetDeviceUsage:input_type -> moreh.sdamanager.DeviceUsageRequest
	69,  // 140: moreh.sdamanager.UserAPI.ListTokenUsage:input_type -> moreh.sdamanager.ListTokenUsageRequest
	72,  // 141: moreh.sdamanager.UserAPI.ListConfigure:input_type -> moreh.sdamanager.ListConfigureRequest
	74,  // 142: moreh.sdamanager.UserAPI.GetConfigure:input_type -> moreh.sdamanager.GetConfigureRequest
	75,  // 143: moreh.sdamanager.UserAPI.UpdateConfigure:input_type -> moreh.sdamanager.UpdateConfigureRequest
	27,  // 144: moreh.sdamanager.UserAPI.ListSDAModel:output_type -> moreh.sdamanager.SDAModelList
	8,   // 145: moreh.sdamanager.UserAPI.CreateSDAModel:output_type -> moreh.sdamanager.CreateSDAModelResponse
	11,  // 146: moreh.sdamanager.UserAPI.DeleteSDAModel:output_type -> moreh.sdamanager.DeleteResponse
	9,   // 147: moreh.sdamanager.UserAPI.CreateSDA:output_type -> moreh.sdamanager.CreateSDAResponse
	47,  // 148: moreh.sdamanager.UserAPI.GetSDAInfo:output_type -> moreh.sdamanager.GetSDAInfoResponse
	28,  // 149: moreh.sdamanager.UserAPI.ListSDA:output_type -> moreh.sdamanager.SDAList
	10,  // 150: moreh.sdamanager.UserAPI.UpdateSDA:output_type -> moreh.sdamanager.UpdateResponse
	11,  // 151: moreh.sdamanager.UserAPI.DeleteSDA:output_type -> moreh.sdamanager.DeleteResponse
	13,  // 152: moreh.sdamanager.UserAPI.CreateToken:output_type -> moreh.sdamanager.CreateTokenResponse
	89,  // 153: moreh.sdamanager.UserAPI.ListToken:output_type -> moreh.sdamanager.TokenList
	48,  // 154: moreh.sdamanager.UserAPI.GetToken:output_type -> moreh.sdamanager.GetTokenResponse
	10,  // 155: moreh.sdamanager.UserAPI.UpdateToken:output_type -> moreh.sdamanager.UpdateResponse
	11,  // 156: moreh.sdamanager.UserAPI.DeleteToken:output_type -> moreh.sdamanager.DeleteResponse
	30,  // 157: moreh.sdamanager.UserAPI.ListBackend:output_type -> moreh.sdamanager.BackendList
	55,  // 158: moreh.sdamanager.UserAPI.GetBackend:output_type -> moreh.sdamanager.GetBackendResponse
	41,  // 159: moreh.sdamanager.UserAPI.ReleaseDevice:output_type -> moreh.sdamanager.ReleaseDeviceResponse
	90,  // 160: moreh.sdamanager.UserAPI.ReleaseAllDevice:output_type -> moreh.sdamanager.Boolean
	20,  // 161: moreh.sdamanager.UserAPI.ListSDAUtilizations:output_type -> moreh.sdamanager.ListSDAUtilizationsResponse
	21,  // 162: moreh.sdamanager.UserAPI.ListSDAJob:output_type -> moreh.sdamanager.GetSDAUtilizationsResponse
	21,  // 163: moreh.sdamanager.UserAPI.GetSDAUtilizations:output_type -> moreh.sdamanager.GetSDAUtilizationsResponse
	32,  // 164: moreh.sdamanager.UserAPI.ListJobQueue:output_type -> moreh.sdamanager.JobQueueList
	10,  // 165: moreh.sdamanager.UserAPI.UpdateJobPriority:output_type -> moreh.sdamanager.UpdateResponse
	33,  // 166: moreh.sdamanager.UserAPI.ListJobHistory:output_type -> moreh.sdamanager.JobHistoryList
	88,  // 167: moreh.sdamanager.UserAPI.GetVersion:output_type -> moreh.sdamanager.Version
	67,  // 168: moreh.sdamanager.UserAPI.GetServerVersion:output_type -> moreh.sdamanager.ListServerVersion
	38,  // 169: moreh.sdamanager.UserAPI.ListEventLog:output_type -> moreh.sdamanager.EventLogList
	43,  // 170: moreh.sdamanager.UserAPI.CreateBackend:output_type -> moreh.sdamanager.CreateBackendResponse
	11,  // 171: moreh.sdamanager.UserAPI.DeleteBackend:output_type -> moreh.sdamanager.DeleteResponse
	10,  // 172: moreh.sdamanager.UserAPI.UpdateBackend:output_type -> moreh.sdamanager.UpdateResponse
	10,  // 173: moreh.sdamanager.UserAPI.UpdateDevice:output_type -> moreh.sdamanager.UpdateResponse
	50,  // 174: moreh.sdamanager.UserAPI.CreateVersionInfo:output_type -> moreh.sdamanager.CreateVersionInfoResponse
	11,  // 175: moreh.sdamanager.UserAPI.DeleteVersionInfo:output_type -> moreh.sdamanager.DeleteResponse
	10,  // 176: moreh.sdamanager.UserAPI.UpdateVersionInfo:output_type -> moreh.sdamanager.UpdateResponse
	91,  // 177: moreh.sdamanager.UserAPI.ListVersionInfo:output_type -> moreh.sdamanager.VersionInfoList
	60,  // 178: moreh.sdamanager.UserAPI.CreateGroup:output_type -> moreh.sdamanager.CreateGroupResponse
	11,  // 179: moreh.sdamanager.UserAPI.DeleteGroup:output_type -> moreh.sdamanager.DeleteResponse
	10,  // 180: moreh.sdamanager.UserAPI.UpdateGroup:output_type -> moreh.sdamanager.UpdateResponse
	92,  // 181: moreh.sdamanager.UserAPI.ListGroup:output_type -> moreh.sdamanager.GroupList
	10,  // 182: moreh.sdamanager.UserAPI.ChangeGroup:output_type -> moreh.sdamanager.UpdateResponse
	66,  // 183: moreh.sdamanager.UserAPI.ListRelation:output_type -> moreh.sdamanager.RelationList
	58,  // 184: moreh.sdamanager.UserAPI.GetDeviceUsage:output_type -> moreh.sdamanager.DeviceUsageResponse
	70,  // 185: moreh.sdamanager.UserAPI.ListTokenUsage:output_type -> moreh.sdamanager.ListTokenUsageResponse
	73,  // 186: moreh.sdamanager.UserAPI.ListConfigure:output_type -> moreh.sdamanager.ListConfigureResponse
	86,  // 187: moreh.sdamanager.UserAPI.GetConfigure:output_type -> moreh.sdamanager.Configure
	10,  // 188: moreh.sdamanager.UserAPI.UpdateConfigure:output_type -> moreh.sdamanager.UpdateResponse
	144, // [144:189] is the sub-list for method output_type
	99,  // [99:144] is the sub-list for method input_type
	99,  // [99:99] is the sub-list for extension type_name
	99,  // [99:99] is the sub-list for extension extendee
	0,   // [0:99] is the sub-list for field type_name
}

func init() { file_sdamanager_api_proto_init() }
func file_sdamanager_api_proto_init() {
	if File_sdamanager_api_proto != nil {
		return
	}
	file_sdamanager_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sdamanager_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSDAModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSDAModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSDARequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSDARequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSDARequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSDAModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSDAResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateJobPriorityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSDAUtilizationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSDAUtilizationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSDAUtilizationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSDAUtilizationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDAUtilization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDAModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDAModelList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDAList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackendListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackendList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobQueueList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobHistoryList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobQueueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLogList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Referer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBackendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBackendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBackendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBackendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSDAInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVersionInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVersionInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVersionInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVersionInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPMI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBackendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBackendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceUsageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceUsageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRelationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServerVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTokenUsageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTokenUsageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConfigureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConfigureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdamanager_api_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPMI_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sdamanager_api_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   74,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sdamanager_api_proto_goTypes,
		DependencyIndexes: file_sdamanager_api_proto_depIdxs,
		EnumInfos:         file_sdamanager_api_proto_enumTypes,
		MessageInfos:      file_sdamanager_api_proto_msgTypes,
	}.Build()
	File_sdamanager_api_proto = out.File
	file_sdamanager_api_proto_rawDesc = nil
	file_sdamanager_api_proto_goTypes = nil
	file_sdamanager_api_proto_depIdxs = nil
}
