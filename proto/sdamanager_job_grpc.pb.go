// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: sdamanager_job.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobAPIClient is the client API for JobAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobAPIClient interface {
	StartJob(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*ConnectionResponse, error)
	GetPlatform(ctx context.Context, in *PlatformRequest, opts ...grpc.CallOption) (*PlatformResponse, error)
	FinishJob(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectResponse, error)
	Heartbeat(ctx context.Context, in *FrontendID, opts ...grpc.CallOption) (*HeartbeatResponse, error)
}

type jobAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewJobAPIClient(cc grpc.ClientConnInterface) JobAPIClient {
	return &jobAPIClient{cc}
}

func (c *jobAPIClient) StartJob(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*ConnectionResponse, error) {
	out := new(ConnectionResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.JobAPI/StartJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobAPIClient) GetPlatform(ctx context.Context, in *PlatformRequest, opts ...grpc.CallOption) (*PlatformResponse, error) {
	out := new(PlatformResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.JobAPI/GetPlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobAPIClient) FinishJob(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectResponse, error) {
	out := new(DisconnectResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.JobAPI/FinishJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobAPIClient) Heartbeat(ctx context.Context, in *FrontendID, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, "/moreh.sdamanager.JobAPI/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobAPIServer is the server API for JobAPI service.
// All implementations should embed UnimplementedJobAPIServer
// for forward compatibility
type JobAPIServer interface {
	StartJob(context.Context, *ConnectionRequest) (*ConnectionResponse, error)
	GetPlatform(context.Context, *PlatformRequest) (*PlatformResponse, error)
	FinishJob(context.Context, *DisconnectRequest) (*DisconnectResponse, error)
	Heartbeat(context.Context, *FrontendID) (*HeartbeatResponse, error)
}

// UnimplementedJobAPIServer should be embedded to have forward compatible implementations.
type UnimplementedJobAPIServer struct {
}

func (UnimplementedJobAPIServer) StartJob(context.Context, *ConnectionRequest) (*ConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartJob not implemented")
}
func (UnimplementedJobAPIServer) GetPlatform(context.Context, *PlatformRequest) (*PlatformResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlatform not implemented")
}
func (UnimplementedJobAPIServer) FinishJob(context.Context, *DisconnectRequest) (*DisconnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishJob not implemented")
}
func (UnimplementedJobAPIServer) Heartbeat(context.Context, *FrontendID) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}

// UnsafeJobAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobAPIServer will
// result in compilation errors.
type UnsafeJobAPIServer interface {
	mustEmbedUnimplementedJobAPIServer()
}

func RegisterJobAPIServer(s grpc.ServiceRegistrar, srv JobAPIServer) {
	s.RegisterService(&JobAPI_ServiceDesc, srv)
}

func _JobAPI_StartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobAPIServer).StartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.JobAPI/StartJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobAPIServer).StartJob(ctx, req.(*ConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobAPI_GetPlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlatformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobAPIServer).GetPlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.JobAPI/GetPlatform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobAPIServer).GetPlatform(ctx, req.(*PlatformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobAPI_FinishJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobAPIServer).FinishJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.JobAPI/FinishJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobAPIServer).FinishJob(ctx, req.(*DisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobAPI_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrontendID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobAPIServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreh.sdamanager.JobAPI/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobAPIServer).Heartbeat(ctx, req.(*FrontendID))
	}
	return interceptor(ctx, in, info, handler)
}

// JobAPI_ServiceDesc is the grpc.ServiceDesc for JobAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moreh.sdamanager.JobAPI",
	HandlerType: (*JobAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartJob",
			Handler:    _JobAPI_StartJob_Handler,
		},
		{
			MethodName: "GetPlatform",
			Handler:    _JobAPI_GetPlatform_Handler,
		},
		{
			MethodName: "FinishJob",
			Handler:    _JobAPI_FinishJob_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _JobAPI_Heartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sdamanager_job.proto",
}
